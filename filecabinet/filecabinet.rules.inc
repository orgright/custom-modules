<?php
// $Id$

/**
 * @file
 * Provides orgRight filecabinet automation rules functionality
 * using the Rules module.  This file will define the events that
 * are generated by the filecabinet module, along with conditions
 * and actions that can be undertaken on drawer, folder, 
 * and payment information items.
 *
 */

/**
 * Implementation of hook_rules_data_type_info
 *
 * Add three new data types for the three node types
 * - drawer
 * - folder
 * - document ("document")
 */
function filecabinet_rules_data_type_info(){
  $datatypes['drawer'] = array(
    'label' => t('Drawer'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'File cabinet'
  );
  $datatypes['folder'] = array(
    'label' => t('Folder'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'File cabinet'
  );
  $datatypes['document'] = array(
    'label' => t('Document'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'File cabinet'
  );
  return $datatypes;
}


/**
 * Implementation of hook_rules_event_info
 */
function filecabinet_rules_event_info() {
  // Specify events relating to drawer records
  $events['filecabinet_event_drawer_create'] = array(
    'label' => t('Drawer has been created'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_new' => array('type' => 'drawer', 'label' => t('New drawer')),
      'parent' => array('type' => 'drawer', 'label' => t('Parent drawer'),
         'handler' => 'filecabinet_event_drawer_get_parent'),
      'owner' => array('type' => 'user', 'label' => t('Owner'),
         'handler' => 'filecabinet_event_drawer_get_owner'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_drawer_update'] = array(
    'label' => t('Drawer has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_new' => array('type' => 'drawer', 'label' => t('Updated drawer')),
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer'),
         'handler' => 'filecabinet_event_drawer_update_get_original'),
      'parent' => array('type' => 'drawer', 'label' => t('Parent drawer'),
         'handler' => 'filecabinet_event_drawer_get_parent'),
      'owner' => array('type' => 'user', 'label' => t('Owner'),
         'handler' => 'filecabinet_event_drawer_get_owner'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_drawer_delete'] = array(
    'label' => t('Drawer has been deleted'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer')),
      'parent' => array('type' => 'drawer', 'label' => t('Parent drawer'),
         'handler' => 'filecabinet_event_drawer_get_parent'),
      'owner' => array('type' => 'user', 'label' => t('Owner'),
         'handler' => 'filecabinet_event_drawer_get_owner'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_drawer_wnid_update'] = array(
    'label' => t('Drawer parent has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_new' => array('type' => 'drawer', 'label' => t('Updated drawer')),
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer'),
         'handler' => 'filecabinet_event_drawer_update_get_original'),
      'parent_new' => array('type' => 'drawer', 'label' => t('Updated parent'),
         'handler' => 'filecabinet_event_drawer_get_parent'),
      'parent_old' => array('type' => 'drawer', 'label' => t('Original parent'),
         'handler' => 'filecabinet_event_drawer_update_get_original_parent'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_drawer_ouid_update'] = array(
    'label' => t('Drawer owner has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_new' => array('type' => 'drawer', 'label' => t('Updated drawer')),
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer'),
         'handler' => 'filecabinet_event_drawer_update_get_original'),
      'owner' => array('type' => 'user', 'label' => t('Updated owner'),
         'handler' => 'filecabinet_event_drawer_get_owner'),
      'owner' => array('type' => 'user', 'label' => t('Original owner'),
         'handler' => 'filecabinet_event_drawer_update_get_original_owner'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_drawer_drawer_update'] = array(
    'label' => t('Drawer name been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_new' => array('type' => 'drawer', 'label' => t('Updated drawer')),
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer'),
         'handler' => 'filecabinet_event_drawer_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_drawer_drawerstatus_update'] = array(
    'label' => t('Drawer status has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_new' => array('type' => 'drawer', 'label' => t('Updated drawer')),
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer'),
         'handler' => 'filecabinet_event_drawer_update_get_original'),

    ),
    'help' => t(''),
  );
  $events['filecabinet_event_drawer_drawerperm_update'] = array(
    'label' => t('Drawer permissions have been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'drawer_new' => array('type' => 'drawer', 'label' => t('Updated drawer')),
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer'),
         'handler' => 'filecabinet_event_drawer_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to folder records
  $events['filecabinet_event_folder_create'] = array(
    'label' => t('Folder has been created'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_new' => array('type' => 'folder', 'label' => t('Created folder')),
      'drawer' => array('type' => 'drawer', 'label' => t('Drawer'),
         'handler' => 'filecabinet_event_folder_get_drawer'),
      'parent' => array('type' => 'folder', 'label' => t('Parent folder'),
         'handler' => 'filecabinet_event_folder_get_parent'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_folder_update'] = array(
    'label' => t('Folder has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_new' => array('type' => 'folder', 'label' => t('Updated folder')),
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder'),
         'handler' => 'filecabinet_event_folder_get_original'),
      'drawer' => array('type' => 'drawer', 'label' => t('Drawer'),
         'handler' => 'filecabinet_event_folder_get_drawer'),
      'parent' => array('type' => 'folder', 'label' => t('Parent folder'),
         'handler' => 'filecabinet_event_folder_get_parent'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_folder_delete'] = array(
    'label' => t('Folder has been deleted'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder')),
      'drawer' => array('type' => 'drawer', 'label' => t('Drawer'),
         'handler' => 'filecabinet_event_folder_get_drawer'),
      'parent' => array('type' => 'folder', 'label' => t('Parent folder'),
         'handler' => 'filecabinet_event_folder_get_parent'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_folder_fnid_update'] = array(
    'label' => t('Folder has been moved in folder hierarchy'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_new' => array('type' => 'folder', 'label' => t('Updated folder')),
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder'),
         'handler' => 'filecabinet_event_folder_update_get_original'),
      'parent_new' => array('type' => 'folder', 'label' => t('Updated parent'),
         'handler' => 'filecabinet_event_folder_get_parent'),
      'parent_old' => array('type' => 'folder', 'label' => t('Original parent'),
         'handler' => 'filecabinet_event_folder_update_get_original_parent'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_folder_wnid_update'] = array(
    'label' => t('Folder has been moved to a new drawer'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_new' => array('type' => 'folder', 'label' => t('Updated folder')),
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder'),
         'handler' => 'filecabinet_event_folder_update_get_original'),
      'drawer_new' => array('type' => 'drawer', 'label' => t('Updated drawer'),
         'handler' => 'filecabinet_event_folder_get_drawer'),
      'drawer_old' => array('type' => 'drawer', 'label' => t('Original drawer'),
         'handler' => 'filecabinet_event_folder_update_get_original_drawer'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_folder_folder_update'] = array(
    'label' => t('Folder name has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_new' => array('type' => 'folder', 'label' => t('Updated folder')),
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder'),
         'handler' => 'filecabinet_event_folder_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_folder_folderstatus_update'] = array(
    'label' => t('Folder status has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_new' => array('type' => 'folder', 'label' => t('Updated folder')),
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder'),
         'handler' => 'filecabinet_event_folder_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_folder_folderperm_update'] = array(
    'label' => t('Folder permissions have been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'folder_new' => array('type' => 'folder', 'label' => t('Updated folder')),
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder'),
         'handler' => 'filecabinet_event_folder_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to document records
  $events['filecabinet_event_document_create'] = array(
    'label' => t('Document has been created'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Created document')),
      'folder' => array('type' => 'folder', 'label' => t('Folder'),
         'handler' => 'filecabinet_event_document_get_folder'),
      'member' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'filecabinet_event_document_get_member'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_update'] = array(
    'label' => t('Document has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_get_original'),
      'folder' => array('type' => 'folder', 'label' => t('Folder'),
         'handler' => 'filecabinet_event_document_get_folder'),
      'member' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'filecabinet_event_document_get_member'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_delete'] = array(
    'label' => t('Document has been deleted'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_old' => array('type' => 'document', 'label' => t('Original document')),
      'folder' => array('type' => 'folder', 'label' => t('Folder'),
         'handler' => 'filecabinet_event_document_get_folder'),
      'member' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'filecabinet_event_document_get_member'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_fnid_update'] = array(
    'label' => t('Document has been filed in a new folder'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
      'folder_new' => array('type' => 'folder', 'label' => t('Updated folder'),
         'handler' => 'filecabinet_event_document_get_folder'),
      'folder_old' => array('type' => 'folder', 'label' => t('Original folder'),
         'handler' => 'filecabinet_event_document_update_get_original_folder'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_mnid_update'] = array(
    'label' => t('Document author has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Updated member'),
         'handler' => 'filecabinet_event_document_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
         'handler' => 'filecabinet_event_document_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_afid_update'] = array(
    'label' => t('Document attached file has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_docname_update'] = array(
    'label' => t('Document name has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_docversion_update'] = array(
    'label' => t('Document version has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_docdate_update'] = array(
    'label' => t('Document date has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_doctype_update'] = array(
    'label' => t('Document type has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['filecabinet_event_document_docstatus_update'] = array(
    'label' => t('Document status has been updated'),
    'module' => 'File cabinet',
    'arguments' => array(
      'document_new' => array('type' => 'document', 'label' => t('Updated document')),
      'document_old' => array('type' => 'document', 'label' => t('Original document'),
         'handler' => 'filecabinet_event_document_update_get_original'),
    ),
    'help' => t(''),
  );

  return $events;
}

/**
 * handlers for loading data items when required
 */
function filecabinet_event_drawer_update_get_original($node) {
  return filecabinet_event_update_get_original('drawer', $node);
}

function filecabinet_event_folder_update_get_original($node) {
  return filecabinet_event_update_get_original('folder', $node);
}

function filecabinet_event_document_update_get_original($node) {
  return filecabinet_event_update_get_original('document', $node);
}

function filecabinet_event_update_get_original($type, $node) {
  // The passed node is the updated version, original no longer on database
  // so create a dummy copy and populate with selected data from current
  // version, and then merge in the saved original data
  $o_node = (object)orgright_create_node($type);
  $o_node->nid = $node->nid;
  $o_node->vid = $node->vid;
  $o_node->uid = $node->uid;
  $o_node->name = $node->name;
  if ($o_data = unserialize($node->original)) {
    foreach ($o_data as $field => $value) { $o_node->$field = $value; }
  }
  return $o_node;
}


function filecabinet_event_drawer_get_parent($node) {
  return node_load($node->wnid);
}

function filecabinet_event_drawer_get_owner($node) {
  return user_load($node->ouid);
}

function filecabinet_event_folder_get_drawer($node) {
  return node_load($node->wnid);
}

function filecabinet_event_folder_get_parent($node) {
  return node_load($node->fnid);
}

function filecabinet_event_document_get_folder($node) {
  return node_load($node->fnid);
}

function filecabinet_event_document_get_member($node) {
  return node_load($node->mnid);
}

function filecabinet_event_drawer_update_get_original_parent($node) {
  $oldnode = filecabinet_event_drawer_update_get_original($node);
  return node_load($oldnode->wnid);
}

function filecabinet_event_drawer_update_get_original_owner($node) {
  $oldnode = filecabinet_event_drawer_update_get_original($node);
  return user_load($oldnode->ouid);
}

function filecabinet_event_folder_update_get_original_drawer($node) {
  $oldnode = filecabinet_event_folder_update_get_original($node);
  return node_load($oldnode->wnid);
}

function filecabinet_event_folder_update_get_original_parent($node) {
  $oldnode = filecabinet_event_folder_update_get_original($node);
  return node_load($oldnode->fnid);
}

function filecabinet_event_document_update_get_original_folder($node) {
  $oldnode = filecabinet_event_document_update_get_original($node);
  return node_load($oldnode->fnid);
}

function filecabinet_event_document_update_get_original_member($node) {
  $oldnode = filecabinet_event_document_update_get_original($node);
  return node_load($oldnode->mnid);
}


/**
 * Implementation of hook_rules_condition_info
 */
function filecabinet_rules_condition_info() {
  // Specify conditions relating to drawer records
  $conditions['filecabinet_condition_drawer_is_primary'] = array(
    'label' => t('Drawer is primary'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'drawer' => array('type' => 'drawer', 'label' => t('drawer')),
     ),
    'help' => t('Is TRUE if the drawer contains subsidiary drawers'),
  );
  $conditions['filecabinet_condition_drawer_is_subsidiary'] = array(
    'label' => t('Drawer is subsidiary'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'drawer' => array('type' => 'drawer', 'label' => t('drawer')),
     ),
    'help' => t('Is TRUE if the drawer is contained in another drawer'),
  );
  $conditions['filecabinet_condition_drawer_wnid_is'] = array(
    'label' => t('Drawer parent is {drawer}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'drawer' => array('type' => 'drawer', 'label' => t('Drawer')),
       'wnid' => array('type' => 'number', 'label' => t('Parent')),
     ),
    'help' => t('Is TRUE if drawer is contained in the selected drawer'),
  );
  $conditions['filecabinet_condition_drawer_ouid_is'] = array(
    'label' => t('Drawer owner is {user}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'drawer' => array('type' => 'drawer', 'label' => t('Drawer')),
       'ouid' => array('type' => 'number', 'label' => t('Owner')),
     ),
    'help' => t('Is TRUE if drawer is owned by the selected user'),
  );
  $conditions['filecabinet_condition_drawer_drawerstatus_is'] = array(
    'label' => t('Drawer status is {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'drawer' => array('type' => 'drawer', 'label' => t('Drawer')),
       'drawerstatus' => array('type' => 'string', 'label' => t('Status')),
     ),
    'help' => t('Is TRUE if the drawer status matches the specified value'),
  );
  $conditions['filecabinet_condition_drawer_drawerperm_is'] = array(
    'label' => t('Drawer permission is {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'drawer' => array('type' => 'drawer', 'label' => t('Drawer')),
       'drawerperm' => array('type' => 'string', 'label' => t('Permissions')),
     ),
    'help' => t('Is TRUE if the date joined is later than the specified date'),
  );

  // Specify conditions relating to folder records
  $conditions['filecabinet_condition_folder_fnid_is'] = array(
    'label' => t('Folder parent is {folder}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'folder' => array('type' => 'folder', 'label' => t('Folder')),
       'fnid' => array('type' => 'number', 'label' => t('Parent')),
     ),
    'help' => t('Is TRUE if the folder is filed within the specified folder'),
  );
  $conditions['filecabinet_condition_folder_wnid_is'] = array(
    'label' => t('Folder filed in {drawer}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'folder' => array('type' => 'folder', 'label' => t('Folder')),
       'wnid' => array('type' => 'number', 'label' => t('Drawer')),
     ),
    'help' => t('Is TRUE if the folder is filed in the specified drawer'),
  );
  $conditions['filecabinet_condition_folder_folderstatus_is'] = array(
    'label' => t('Folder status is {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'folder' => array('type' => 'folder', 'label' => t('Folder')),
       'folderstatus' => array('type' => 'date', 'label' => t('Status')),
     ),
    'help' => t('Is TRUE if the folder status matches the specified value'),
  );

  // Specify conditions relating to document records
  $conditions['filecabinet_condition_document_fnid_is'] = array(
    'label' => t('Document filed in {folder}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'document' => array('type' => 'document', 'label' => t('Document')),
       'fnid' => array('type' => 'number', 'label' => t('Folder')),
     ),
    'help' => t('Is TRUE if the document is filed in the specified folder'),
  );
  $conditions['filecabinet_condition_document_mnid_is'] = array(
    'label' => t('Document author is {member}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'document' => array('type' => 'document', 'label' => t('Document')),
       'author' => array('type' => 'number', 'label' => t('Member')),
     ),
    'help' => t('Is TRUE if the document author is the specified member'),
  );
  $conditions['filecabinet_condition_document_docdate_before'] = array(
    'label' => t('Document date before {date}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'document' => array('type' => 'document', 'label' => t('Document')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the document date is earlier than the specified date'),
  );
  $conditions['filecabinet_condition_document_docdate_after'] = array(
    'label' => t('Document date after {date}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'document' => array('type' => 'document', 'label' => t('Document')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the document date is later than the specified date'),
  );
  $conditions['filecabinet_condition_document_doctype_is'] = array(
    'label' => t('Document type is {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'document' => array('type' => 'document', 'label' => t('Document')),
       'doctype' => array('type' => 'string', 'label' => t('Type')),
     ),
    'help' => t('Is TRUE if the document type matches the specified value'),
  );
  $conditions['filecabinet_condition_document_docstatus_is'] = array(
    'label' => t('Document status is {status}'),
    'module' => t('File cabinet'),
    'arguments' => array(
       'document' => array('type' => 'document', 'label' => t('Document')),
       'docstatus' => array('type' => 'string', 'label' => t('status')),
     ),
    'help' => t('Is TRUE if the document status matches the specified value'),
  );

  return $conditions;
}

/**
 * Mini forms to collect parameters for above condition checking
 */
function filecabinet_condition_drawer_wnid_is_form($settings, &$form) {
  $param = 'wnid';
  $name = t('Parent drawer');
  $desc = t('Chose drawer for compare');
  $opts = array();
  $sql = "SELECT w.nid, w.drawer FROM {node} n JOIN {org_drawers} w ON w.nid = n.nid WHERE w.vid = n.vid";
  $result = db_query($sql);
  while ($obj = db_fetch_object($result)) { $opts[$obj->nid] = $obj->drawer; }
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_drawer_ouid_is_form($settings, &$form) {
  $param = 'ouid';
  $name = t('Drawer owner');
  $desc = t('Select user for compare');
  $opts = array();
  $sql = "SELECT uid, name FROM {users} WHERE uid > ".O_MAX_PROTECTED_USER;
  $result = db_query($sql);
  while ($obj = db_fetch_object($result)) { $opts[$obj->uid] = $obj->name; }
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_drawer_drawerstatus_is_form($settings, &$form) {
  $param = 'drawerstatus';
  $name = t('Drawer status');
  $desc = t('Select drawer status for compare');
  $opts = filecabinet_get_drawer_statuses();
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_drawer_drawerperm_is_form($settings, &$form) {
  $param = 'drawerperm';
  $name = t('Drawer permissions');
  $desc = t('Select drawer permissions for compare');
  $opts = array('not implemented');
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_folder_fnid_is_form($settings, &$form) {
  $param = 'fnid';
  $name = t('Parent folder');
  $desc = t('Chose folder for compare');
  $opts = array();
  $sql = "SELECT f.nid, f.folder FROM {node} n JOIN {org_folders} f ON f.nid = n.nid WHERE f.vid = n.vid";
  $result = db_query($sql);
  while ($obj = db_fetch_object($result)) { $opts[$obj->nid] = $obj->folder; }
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_folder_wnid_is_form($settings, &$form) {
  $param = 'wnid';
  $name = t('Filecabinet drawer');
  $desc = t('Chose drawer for compare');
  $opts = array();
  $sql = "SELECT w.nid, w.drawer FROM {node} n JOIN {org_drawers} w ON w.nid = n.nid WHERE w.vid = n.vid";
  $result = db_query($sql);
  while ($obj = db_fetch_object($result)) { $opts[$obj->nid] = $obj->drawer; }
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_folder_folderstatus_is_form($settings, &$form) {
  $param = 'folderstatus';
  $name = t('Folder status');
  $desc = t('Chose status for compare');
  $opts = filecabinet_get_folder_statuses();
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_document_fnid_is_form($settings, &$form) {
  $param = 'fnid';
  $name = t('Document folder');
  $desc = t('Chose folder for compare');
  $opts = array();
  $sql = "SELECT f.nid, f.folder FROM {node} n JOIN {org_folders} f ON f.nid = n.nid WHERE f.vid = n.vid";
  $result = db_query($sql);
  while ($obj = db_fetch_object($result)) { $opts[$obj->nid] = $obj->folder; }
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_document_mnid_is_form($settings, &$form) {
  $param = 'mnid';
  $name = t('Document author');
  $desc = t('Chose member for compare');
  $opts = array();
  $sql = "SELECT m.nid, m.member FROM {node} n JOIN {org_members} m ON m.nid = n.nid WHERE m.vid = n.vid";
  $result = db_query($sql);
  while ($obj = db_fetch_object($result)) { $opts[$obj->nid] = $obj->member; }
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_document_doctype_is_form($settings, &$form) {
  $param = 'doctype';
  $name = t('Document type');
  $desc = t('Select type for compare');
  $opts = filecabinet_get_document_types();
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_document_docstatus_is_form($settings, &$form) {
  $param = 'docstatus';
  $name = t('Document status');
  $desc = t('Select status for compare');
  $opts = filecabinet_get_document_statuses();
  filecabinet_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_condition_parameter_is_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for checking
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
}

/**
 * Rules condition callback functions
 * Each must return either TRUE or FALSE
 */
function filecabinet_condition_drawer_is_primary($drawer) {
  // TRUE if subsidiary drawers exist for this drawer
  $sql = "SELECT COUNT(w.nid) FROM {node} n JOIN {org_drawers} w ON w.nid = n.nid WHERE w.vid = n.vid AND w.wnid = %d";
  return db_result(db_query($sql, $drawer->nid));
}

function filecabinet_condition_drawer_is_subsidary($drawer) {
  // TRUE if this is a subsidiary drawer
  return $drawer->wnid;
}

function filecabinet_condition_drawer_wnid_is($drawer, $wnid) {
  // TRUE if the drawer parent matches the specified value
  return ($drawer->wnid == $wnid);
}

function filecabinet_condition_drawer_ouid_is($drawer, $ouid) {
  // TRUE if the drawer owner matches the specified value
  return ($drawer->ouid == $ouid);
}

function filecabinet_condition_drawer_drawerstatus_is($drawer, $drawerstatus) {
  // TRUE if the drawer status matches the specified value
  return ($drawer->drawerstatus == $drawerstatus);
}

function filecabinet_condition_drawer_drawerperm_is($drawer, $drawerperm) {
  // TRUE if the drawer permissions match the supplied value
  return ($drawer->drawerperm == $drawerperm);
}


function filecabinet_condition_folder_fnid_is($folder, $fnid) {
  // TRUE if folder is filed in the specified parent folder
  return ($folder->fnid == $fnid);
}

function filecabinet_condition_folder_wnid_is($folder, $wnid) {
  // TRUE if folder is filed in the specified drawer
  return ($folder->wnid == $wnid);
}

function filecabinet_condition_folder_folderstatus_is($folder, $folderstatus) {
  // TRUE if folder status matches the supplied value
  return ($folder->folderstatus == $folderstatus);
}


function filecabinet_condition_document_fnid_is($document, $fnid) {
  // TRUE if document is filed in the specified folder
  return ($document->fnid == $fnid);
}

function filecabinet_condition_document_mnid_is($document, $mnid) {
  // TRUE if document author is the specified member
  return ($document->mnid == $mnid);
}

function filecabinet_condition_document_docdate_before($document, $tdate) {
  // TRUE if document dated before the supplied date
  return ($document->docdate < $tdate);
}

function filecabinet_condition_document_docdate_after($document, $tdate) {
  // TRUE if document dated after the supplied date
  return ($document->docdate > $tdate);
}

function filecabinet_condition_document_doctype_is($document, $doctype) {
  // TRUE if document type matches the supplied value
  return ($document->doctype == $doctype);
}

function filecabinet_condition_document_docstatus_is($document, $docstatus) {
  // TRUE if document status matches the supplied value
  return ($document->docstatus > $docstatus);
}


/**
 * Implementation of hook_rules_action_info
 */
function filecabinet_rules_action_info() {
  // Specify actions associated with drawer records
  $actions['filecabinet_action_drawer_set_ouid'] = array(
    'label' => t('Set drawer owner to {user}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'drawer' => array('type' => 'drawer', 'label' => t('Drawer')),
      'ouid' => array('type' => 'number', 'label' => t('New owner')),
    ),
    'help' => t('The owner of this drawer will be changed to the specified user'),
  );
  $actions['filecabinet_action_drawer_set_drawerstatus'] = array(
    'label' => t('Set drawer status to {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'drawer' => array('type' => 'drawer', 'label' => t('Drawer')),
      'drawerstatus' => array('type' => 'string', 'label' => t('New status')),
    ),
    'help' => t('The status of this drawer will be changed to the selected value'),
  );
  $actions['filecabinet_action_drawer_add_note'] = array(
    'label' => t('Add drawer note: {text}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'drawer' => array('type' => 'drawer', 'label' => t('drawer')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this drawer record'),
  );

  // Specify actions associated with folder records
  $actions['filecabinet_action_folder_set_folderstatus'] = array(
    'label' => t('Set folder status to {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'folder' => array('type' => 'folder', 'label' => t('Folder')),
      'folderstatus' => array('type' => 'string', 'label' => t('New status')),
    ),
    'help' => t('The folder status will be set to the specified value'),
  );
  $actions['filecabinet_action_folder_add_note'] = array(
    'label' => t('Add folder note: {text}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'folder' => array('type' => 'folder', 'label' => t('Folder')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this folder record'),
  );

  // Specify actions associated with document records
  $actions['filecabinet_action_document_set_doctype'] = array(
    'label' => t('Set document type to {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'document' => array('type' => 'document', 'label' => t('Document')),
      'doctype' => array('type' => 'string', 'label' => t('New type')),
    ),
    'help' => t('The document status will be set to the specified value'),
  );
  $actions['filecabinet_action_document_set_docstatus'] = array(
    'label' => t('Set document status to {value}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'document' => array('type' => 'document', 'label' => t('Document')),
      'docstatus' => array('type' => 'string', 'label' => t('New status')),
    ),
    'help' => t('The document status will be set to the specified value'),
  );
  $actions['filecabinet_action_document_set_docdate'] = array(
    'label' => t('Set document date to {date}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'document' => array('type' => 'document', 'label' => t('Document')),
      'docdate' => array('type' => 'date', 'label' => t('New date')),
    ),
    'help' => t('The document status will be set to the specified value'),
  );
  $actions['filecabinet_action_document_add_note'] = array(
    'label' => t('Add document note: {text}'),
    'module' => t('File cabinet'),
    'arguments' => array(
      'document' => array('type' => 'document', 'label' => t('document')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this document record'),
  );

  return $actions;
}

/**
 * Mini forms to collect parameters for above action processing
 */
function filecabinet_action_drawer_set_ouid_form($settings, &$form) {
  $param = 'ouid';
  $name = t('Drawer owner');
  $desc = t('Select new owner');
  $opts = array();
  $sql = "SELECT uid, name FROM {users} WHERE uid > ".O_MAX_PROTECTED_USER;
  $result = db_query($sql);
  while ($obj = db_fetch_object($result)) { $opts[$obj->uid] = $obj->name; }
  filecabinet_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_action_drawer_set_drawerstatus_form($settings, &$form) {
  $param = 'drawerstatus';
  $name = t('Drawer status');
  $desc = t('Select new status');
  $opts = filecabinet_get_drawer_statuses();
  filecabinet_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_action_folder_set_folderstatus_form($settings, &$form) {
  $param = 'folderstatus';
  $name = t('Folder status');
  $desc = t('Select new status');
  $opts = filecabinet_get_folder_statuses();
  filecabinet_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_action_document_set_doctype_form($settings, &$form) {
  $param = 'doctype';
  $name = t('Type');
  $desc = t('Select new type');
  $opts = filecabinet_get_document_types();
  filecabinet_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_action_document_set_docstatus_form($settings, &$form) {
  $param = 'docstatus';
  $name = t('Status');
  $desc = t('Select new status');
  $opts = filecabinet_get_document_statuses();
  filecabinet_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function filecabinet_action_set_parameter_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for updating
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
}

/**
 * Rules action callback functions
 * Each must implement the action specified
 */
function filecabinet_action_drawer_set_ouid($drawer, $ouid) {
  // Update the drawer with the new category
  $drawer->ouid = $ouid;
  $drawer->rules_update = TRUE;
  return array('drawer' => $drawer);
}

function filecabinet_action_drawer_set_drawerstatus($drawer, $drawerstatus) {
  // Update the drawer with the new status
  $drawer->drawerstatus = $drawerstatus;
  $drawer->rules_update = TRUE;
  return array('drawer' => $drawer);
}

function filecabinet_action_drawer_add_note($drawer, $note) {
  // Add the new note to the front of the existing notes
  $drawer->notes = $note . '; ' . $drawer->notes;
  $drawer->rules_update = TRUE;
  return array('drawer' => $drawer);
}

function filecabinet_action_folder_set_folderstatus($folder, $folderstatus) {
  // Set the folder status to the specified value
  $folder->folderstatus = $folderstatus;
  $folder->rules_update = TRUE;
  return array('folder' => $folder);
}

function filecabinet_action_folder_add_note($folder, $note) {
  // Add the new note to the front of the existing notes
  $folder->notes = $note . '; ' . $folder->notes;
  $drawer->rules_update = TRUE;
  return array('folder' => $folder);
}

function filecabinet_action_document_set_doctype($folder, $doctype) {
  // Set the document type to the specified value
  $document->doctype = $doctype;
  $document->rules_update = TRUE;
  return array('folder' => $folder);
}

function filecabinet_action_document_set_docstatus($folder, $docstatus) {
  // Set the document status to the specified value
  $document->docstatus = $docstatus;
  $document->rules_update = TRUE;
  return array('folder' => $folder);
}

function filecabinet_action_document_set_docdate($folder, $docdate) {
  // Set the document status to the specified value
  $document->docdate = $docdate;
  $document->rules_update = TRUE;
  return array('folder' => $folder);
}

function filecabinet_action_document_add_note($document, $note) {
  // Add the new note to the front of the existing notes
  $document->notes = $note . '; ' . $document->notes;
  $document->rules_update = TRUE;
  return array('document' => $document);
}

