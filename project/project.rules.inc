<?php
// $Id$

/**
 * @file
 * Provides orgRight Project automation rules functionality
 * using the Rules module.  This file will define the events that
 * are generated by the project module, along with conditions
 * and actions that can be undertaken on project, projactivity, 
 * and payment information items.
 *
 */

/**
 * Implementation of hook_rules_data_type_info
 *
 * Add three new data types for the three node types
 * - project
 * - projactivity
 * - projreport
 */
function project_rules_data_type_info(){
  $datatypes['project'] = array(
    'label' => t('Project'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Project'
  );
  $datatypes['projactivity'] = array(
    'label' => t('Project activity'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Project'
  );
  $datatypes['projreport'] = array(
    'label' => t('Project report'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Project'
  );
  return $datatypes;
}


/**
 * Implementation of hook_rules_event_info
 */
function project_rules_event_info() {
  // Specify events relating to project records
  $events['project_event_project_create'] = array(
    'label' => t('Project has been created'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('New project record')),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_project_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_project_update'] = array(
    'label' => t('Project has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('Updated project record')),
      'project_old' => array('type' => 'project', 'label' => t('Original project record'),
         'handler' => 'project_event_project_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_project_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_project_delete'] = array(
    'label' => t('Project has been deleted'),
    'module' => 'Project',
    'arguments' => array(
      'project_old' => array('type' => 'project', 'label' => t('Original project record')),
      'member_old' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_project_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_project_mnid_update'] = array(
    'label' => t('Project manager has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('Updated project record')),
      'project_old' => array('type' => 'project', 'label' => t('Original project record'),
         'handler' => 'project_event_project_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Updated member'),
         'handler' => 'project_event_project_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
         'handler' => 'project_event_project_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_project_project_update'] = array(
    'label' => t('Project title has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('Updated project record')),
      'project_old' => array('type' => 'project', 'label' => t('Original project record'),
         'handler' => 'project_event_project_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_project_projcategory_update'] = array(
    'label' => t('Project category has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('Updated project record')),
      'project_old' => array('type' => 'project', 'label' => t('Original project record'),
         'handler' => 'project_event_project_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_project_projstatus_update'] = array(
    'label' => t('Project status has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('Updated project record')),
      'project_old' => array('type' => 'project', 'label' => t('Original project record'),
         'handler' => 'project_event_project_update_get_original'),

    ),
    'help' => t(''),
  );
  $events['project_event_project_projdatype_update'] = array(
    'label' => t('Project constraint type has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('Updated project record')),
      'project_old' => array('type' => 'project', 'label' => t('Original project record'),
         'handler' => 'project_event_project_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_project_projdate_update'] = array(
    'label' => t('Project constraint date has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'project_new' => array('type' => 'project', 'label' => t('Updated project record')),
      'project_old' => array('type' => 'project', 'label' => t('Original project record'),
         'handler' => 'project_event_project_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to projactivity records
  $events['project_event_projactivity_create'] = array(
    'label' => t('Project activity has been created'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'project_new' => array('type' => 'project', 'label' => t('Project'),
         'handler' => 'project_event_projactivity_get_project'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_projactivity_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_update'] = array(
    'label' => t('Project activity has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_get_original'),
      'project_new' => array('type' => 'project', 'label' => t('Project'),
         'handler' => 'project_event_projactivity_get_project'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_projactivity_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_delete'] = array(
    'label' => t('Project activity has been deleted'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record')),
      'project_old' => array('type' => 'project', 'label' => t('Project'),
         'handler' => 'project_event_projactivity_get_project'),
      'member_old' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_projactivity_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_pnid_update'] = array(
    'label' => t('Project activity project has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
      'project_new' => array('type' => 'project', 'label' => t('Updated project'),
         'handler' => 'project_event_projactivity_get_project'),
      'project_old' => array('type' => 'project', 'label' => t('Original project'),
         'handler' => 'project_event_projactivity_update_get_original_project'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_mnid_update'] = array(
    'label' => t('Project activity person has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Updated member'),
         'handler' => 'project_event_projactivity_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
         'handler' => 'project_event_projactivity_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_activity_update'] = array(
    'label' => t('Project activity title has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_activicategory_update'] = array(
    'label' => t('Project activity category has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_activistatus_update'] = array(
    'label' => t('Project activity status has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_duration_update'] = array(
    'label' => t('Project activity duration has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_duratype_update'] = array(
    'label' => t('Project activity time unit has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_actividatype_update'] = array(
    'label' => t('Project activity constraint type has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_actividate_update'] = array(
    'label' => t('Project activity constraint date has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_actualstart_update'] = array(
    'label' => t('Project activity actual start has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projactivity_actualfinish_update'] = array(
    'label' => t('Project activity actual finish has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated projactivity record')),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original projactivity record'),
         'handler' => 'project_event_projactivity_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to project report records
  $events['project_event_projreport_create'] = array(
    'label' => t('Project report has been created'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_new' => array('type' => 'projreport', 'label' => t('Created project report record')),
      'project_new' => array('type' => 'project', 'label' => t('Project'),
         'handler' => 'project_event_projreport_get_project'),
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Activity'),
         'handler' => 'project_event_projreport_get_projactivity'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_projreport_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projreport_update'] = array(
    'label' => t('Project report has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_new' => array('type' => 'projreport', 'label' => t('Updated project report record')),
      'projreport_old' => array('type' => 'projreport', 'label' => t('Original project report record'),
         'handler' => 'project_event_projreport_get_original'),
      'project_new' => array('type' => 'project', 'label' => t('Project'),
         'handler' => 'project_event_projreport_get_project'),
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Activity'),
         'handler' => 'project_event_projreport_get_projactivity'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_projreport_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projreport_delete'] = array(
    'label' => t('Project report has been deleted'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_old' => array('type' => 'projreport', 'label' => t('Original project report record')),
      'project_old' => array('type' => 'project', 'label' => t('Project'),
         'handler' => 'project_event_projreport_get_project'),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Activity'),
         'handler' => 'project_event_projreport_get_projactivity'),
      'member_old' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'project_event_projreport_get_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projreport_pnid_update'] = array(
    'label' => t('Project report project has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_new' => array('type' => 'projreport', 'label' => t('Updated project report record')),
      'projreport_old' => array('type' => 'projreport', 'label' => t('Original project report record'),
         'handler' => 'project_event_projreport_update_get_original'),
      'project_new' => array('type' => 'project', 'label' => t('Updated project'),
         'handler' => 'project_event_projreport_get_project'),
      'project_old' => array('type' => 'project', 'label' => t('Original project'),
         'handler' => 'project_event_projreport_update_get_original_project'),
    ),
    'help' => t(''),
  );
  $events['project_event_projreport_anid_update'] = array(
    'label' => t('Project report activity has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_new' => array('type' => 'projreport', 'label' => t('Updated project report record')),
      'projreport_old' => array('type' => 'projreport', 'label' => t('Original project report record'),
         'handler' => 'project_event_projreport_update_get_original'),
      'projactivity_new' => array('type' => 'projactivity', 'label' => t('Updated activity'),
         'handler' => 'project_event_projreport_get_projactivity'),
      'projactivity_old' => array('type' => 'projactivity', 'label' => t('Original activity'),
         'handler' => 'project_event_projreport_update_get_original_projactivity'),
    ),
    'help' => t(''),
  );
  $events['project_event_projreport_mnid_update'] = array(
    'label' => t('Project report author has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_new' => array('type' => 'projreport', 'label' => t('Updated project report record')),
      'projreport_old' => array('type' => 'projreport', 'label' => t('Original project report record'),
         'handler' => 'project_event_projreport_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Updated member'),
         'handler' => 'project_event_projreport_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
         'handler' => 'project_event_projreport_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['project_event_projreport_projreport_update'] = array(
    'label' => t('Project report title has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_new' => array('type' => 'projreport', 'label' => t('Updated project report record')),
      'projreport_old' => array('type' => 'projreport', 'label' => t('Original project report record'),
         'handler' => 'project_event_projreport_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['project_event_projreport_projrepdate_update'] = array(
    'label' => t('Project report date has been updated'),
    'module' => 'Project',
    'arguments' => array(
      'projreport_new' => array('type' => 'projreport', 'label' => t('Updated project report record')),
      'projreport_old' => array('type' => 'projreport', 'label' => t('Original project report record'),
         'handler' => 'project_event_projreport_update_get_original'),
    ),
    'help' => t(''),
  );

  return $events;
}

/**
 * handlers for loading data items when required
 */
function project_event_project_update_get_original($node) {
  return project_event_update_get_original('project', $node);
}

function project_event_projactivity_update_get_original($node) {
  return project_event_update_get_original('projactivity', $node);
}

function project_event_projreport_update_get_original($node) {
  return project_event_update_get_original('projreport', $node);
}

function project_event_update_get_original($type, $node) {
  // The passed node is the updated version, original no longer on database
  // so create a dummy copy and populate with selected data from current
  // version, and then merge in the saved original data
  $o_node = (object)orgright_create_node($type);
  $o_node->nid = $node->nid;
  $o_node->vid = $node->vid;
  $o_node->uid = $node->uid;
  $o_node->name = $node->name;
  if ($o_data = unserialize($node->original)) {
    foreach ($o_data as $field => $value) { $o_node->$field = $value; }
  }
  return $o_node;
}


function project_event_project_get_member($node) {
  return node_load($node->mnid);
}

function project_event_projactivity_get_member($node) {
  return node_load($node->mnid);
}

function project_event_projactivity_get_project($node) {
  return node_load($node->pnid);
}

function project_event_projreport_get_project($node) {
  return node_load($node->pnid);
}

function project_event_projreport_get_projactivity($node) {
  return node_load($node->anid);
}

function project_event_projreport_get_member($node) {
  return node_load($node->mnid);
}

function project_event_project_update_get_original_member($node) {
  $oldnode = project_event_project_update_get_original($node);
  return node_load($oldnode->mnid);
}

function project_event_projactivity_update_get_original_member($node) {
  $oldnode = project_event_projactivity_update_get_original($node);
  return node_load($oldnode->mnid);
}

function project_event_projactivity_update_get_original_project($node) {
  $oldnode = project_event_projactivity_update_get_original($node);
  return node_load($oldnode->mnid);
}

function project_event_projreport_update_get_original_project($node) {
  $oldnode = project_event_projreport_update_get_original($node);
  return node_load($oldnode->mnid);
}

function project_event_projreport_update_get_original_projactivity($node) {
  $oldnode = project_event_projreport_update_get_original($node);
  return node_load($oldnode->mnid);
}

function project_event_projreport_update_get_original_member($node) {
  $oldnode = project_event_projreport_update_get_original($node);
  return node_load($oldnode->mnid);
}


/**
 * Implementation of hook_rules_condition_info
 */
function project_rules_condition_info() {
  // Specify conditions relating to project records
  $conditions['project_condition_project_projcategory_is'] = array(
    'label' => t('Project category is {value}'),
    'module' => t('Project'),
    'arguments' => array(
       'project' => array('type' => 'project', 'label' => t('Project')),
       'projcategory' => array('type' => 'string', 'label' => t('Category')),
     ),
    'help' => t('Is TRUE if project category matches the selected value'),
  );
  $conditions['project_condition_project_projstatus_is'] = array(
    'label' => t('Project status is {value}'),
    'module' => t('Project'),
    'arguments' => array(
       'project' => array('type' => 'project', 'label' => t('Project')),
       'projstatus' => array('type' => 'string', 'label' => t('Status')),
     ),
    'help' => t('Is TRUE if project status matches the selected value'),
  );
  $conditions['project_condition_project_projdatype_is'] = array(
    'label' => t('Project constraint type is {value}'),
    'module' => t('Project'),
    'arguments' => array(
       'project' => array('type' => 'project', 'label' => t('Project')),
       'projdatype' => array('type' => 'string', 'label' => t('Constraint type')),
     ),
    'help' => t('Is TRUE if the project constraint type matches the specified value'),
  );
  $conditions['project_condition_project_projdate_before'] = array(
    'label' => t('Project constraint before {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'project' => array('type' => 'project', 'label' => t('Project')),
       'projdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project constraint is before the specified date'),
  );
  $conditions['project_condition_project_projdate_after'] = array(
    'label' => t('Project constraint after {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'project' => array('type' => 'project', 'label' => t('Project')),
       'projdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project constraint is after the specified date'),
  );

  // Specify conditions relating to projactivity records
  $conditions['project_condition_projactivity_activicategory_is'] = array(
    'label' => t('Project activity category is {value}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'activicategory' => array('type' => 'string', 'label' => t('Category')),
     ),
    'help' => t('Is TRUE if the project activity category matches the specified value'),
  );
  $conditions['project_condition_projactivity_activistatus_is'] = array(
    'label' => t('Project activity status is {value}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'activistatus' => array('type' => 'string', 'label' => t('Status')),
     ),
    'help' => t('Is TRUE if the project activity status matches the specified value'),
  );
  $conditions['project_condition_projactivity_duration_longer'] = array(
    'label' => t('Project activity duration longer than {number}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'duration' => array('type' => 'string', 'label' => t('Duration (d/w/m)')),
     ),
    'help' => t('Is TRUE if the project activity duration is longer than the specified number of days/weeks/months'),
  );
  $conditions['project_condition_projactivity_duration_shorter'] = array(
    'label' => t('Project activity duration shorter than {number}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'duration' => array('type' => 'string', 'label' => t('Duration (d/w/m)')),
     ),
    'help' => t('Is TRUE if the project activity duration is longer than the specified number of days/weeks/months'),
  );
  $conditions['project_condition_projactivity_actividatype_is'] = array(
    'label' => t('Project activity constraint type is {value}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'actividatype' => array('type' => 'string', 'label' => t('Constraint type')),
     ),
    'help' => t('Is TRUE if the project activity constraint type matches the specified value'),
  );
  $conditions['project_condition_projactivity_actividate_before'] = array(
    'label' => t('Project activity constraint date before {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project activity constraint date is before the specified date'),
  );
  $conditions['project_condition_projactivity_actividate_after'] = array(
    'label' => t('Project activity contraint date after {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project activity constraint date after the specified date'),
  );
  $conditions['project_condition_projactivity_actualstart_before'] = array(
    'label' => t('Project activity actual start before {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project activity started before the specified date'),
  );
  $conditions['project_condition_projactivity_actualstart_after'] = array(
    'label' => t('Project activity actual start after {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project activity started after the specified date'),
  );
  $conditions['project_condition_projactivity_actualfinish_before'] = array(
    'label' => t('Project activity finish before {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project activity finished before the specified date'),
  );
  $conditions['project_condition_projactivity_actualfinish_after'] = array(
    'label' => t('Project activity finish after {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project activity finished after the specified date'),
  );

  // Specify conditions relating to project report records
  $conditions['project_condition_projreport_projrepdate_before'] = array(
    'label' => t('Project report before {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projreport' => array('type' => 'projreport', 'label' => t('Project report')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project report was made before the specified date'),
  );
  $conditions['project_condition_projreport_projrepdate_after'] = array(
    'label' => t('Project report after {date}'),
    'module' => t('Project'),
    'arguments' => array(
       'projreport' => array('type' => 'projreport', 'label' => t('Project report')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the project report was made after the specified date'),
  );

  return $conditions;
}

/**
 * Mini forms to collect parameters for above condition checking
 */
function project_condition_project_projcategory_is_form($settings, &$form) {
  $param = 'projcategory';
  $name = t('Category');
  $desc = t('Chose category for compare');
  $opts = project_get_categories();
  project_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function project_condition_project_projstatus_is_form($settings, &$form) {
  $param = 'projstatus';
  $name = t('Status');
  $desc = t('Chose status for compare');
  $opts = project_get_statuses();
  project_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function project_condition_project_projdatype_is_form($settings, &$form) {
  $param = 'projdatype';
  $name = t('Constraint type');
  $desc = t('Chose constraint type for compare');
  $opts = project_get_projdatypes('type');
  project_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function project_condition_projactivity_activicategory_is_form($settings, &$form) {
  $param = 'activicategory';
  $name = t('Category');
  $desc = t('Chose category for compare');
  $opts = project_get_categories();
  project_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function project_condition_projactivity_activistatus_is_form($settings, &$form) {
  $param = 'activistatus';
  $name = t('Status');
  $desc = t('Chose status for compare');
  $opts = project_get_statuses();
  project_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function project_condition_projactivity_actividatype_is_form($settings, &$form) {
  $param = 'actividatype';
  $name = t('Constraint type');
  $desc = t('Chose constraint type for compare');
  $opts = project_get_actividatypes('type');
  project_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function project_condition_parameter_is_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for checking
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
}

/**
 * Form validation routines
 */
function project_condition_projactivity_duration_longer_validate($form, &$form_state) {
  project_condition_projactivity_duration_validate($form, $form_state);
}

function project_condition_projactivity_duration_shorter_validate($form, &$form_state) {
  project_condition_projactivity_duration_validate($form, $form_state);
}

function project_condition_projactivity_duration_validate($form, &$form_state) {
  // check that the entered string is a valid duration specification
  $durastring = $form_state['values']['settings']['duration'];
  if ($xpos = strpos($durastring, 'd')) { $duratype = 'day'; }
  elseif ($xpos = strpos($durastring, 'w')) { $duratype = 'week'; }
  elseif ($xpos = strpos($durastring, 'm')) { $duratype = 'month'; }
  // split the passed string and check each component
  $value = trim(substr($durastring, 0, $xpos));
  $units = strtolower(trim(substr($durastring, $xpos)));
  // drop trailing "s" if present
  if (substr($units, -1) == 's') { $units = substr($units, 0 -1); }
  if ($xpos && is_numeric($value) && $units == substr($duratype, 0, strlen($units))) {
    // Get an array showing the number or days required for each unit of druratype
    $daysarray = project_get_duratypes('days');
    // calculate and save the duration in days of the project activity
    $form_state['storage']['duration'] = $daysarray[$duratype] * $value;
  }
  else {
    form_set_error('duration',t('Invalid duration specification - must be a number followed by "day" or "week" or "month". Unit can be abbreviated to initial letter, and plurals are allowed'));
  }
}

/**
 * Form submit routines
 */
function project_condition_projactivity_duration_longer_submit(&$settings, $form, $form_state) {
  project_condition_projactivity_duration_submit($settings, $form, $form_state);
}

function project_condition_projactivity_duration_shorter_submit(&$settings, $form, $form_state) {
  project_condition_projactivity_duration_submit($settings, $form, $form_state);
}

function project_condition_projactivity_duration_submit(&$settings, $form, $form_state) {
  // extract the saved value of duration in days and load into settings
  if ($form_state['storage']['duration']) {
    $settings['duration'] = $form_state['storage']['duration'];
  }
}

/**
 * Rules condition callback functions
 * Each must return either TRUE or FALSE
 */
function project_condition_project_projcategory_is($project, $projcategory) {
  // TRUE if the project category matches the specified value
  return ($project->projcategory == $projcategory);
}

function project_condition_project_projstatus_is($project, $projstatus) {
  // TRUE if the project status matches the specified value
  return ($project->projstatus == $projstatus);
}

function project_condition_project_projdatype_is($project, $projdatype) {
  // TRUE if the project date constraint matches the specified value
  return ($project->projdatype == $projdatype);
}

function project_condition_project_projdate_before($project, $tdate) {
  // TRUE if the project constatint date is earlier than the supplied date
  return ($project->projdate < $tdate);
}

function project_condition_project_projdate_after($project, $tdate) {
  // TRUE if the project constraint date is later than the supplied date
  return ($project->projdate > $tdate);
}

function project_condition_projactivity_activicategory_is($projactivity, $activicategory) {
  // TRUE if projactivity category matches the supplied value
  return ($projactivity->activicategory == $activicategory);
}

function project_condition_projactivity_activistatus_is($projactivity, $activistatus) {
  // TRUE if projactivity status matches the supplied value
  return ($projactivity->activistatus == $activistatus);
}

function project_condition_projactivity_duration_longer($projactivity, $duration) {
  // TRUE if projactivity duration is longer then the supplied value
  // Get an array showing the number or days required for each unit of druratype
  $daysarray = project_get_duratypes('days');
  // calculate the duration in days of the project activity
  return ($daysarray[$projactivity->duratype]*$projactivity->duration > $duration);
}

function project_condition_projactivity_duration_shorter($projactivity, $duration) {
  // TRUE if projactivity duration is shorter than the supplied value
  // Get an array showing the number or days required for each unit of druratype
  $daysarray = project_get_duratypes('days');
  // calculate the duration in days of the project activity
  return ($daysarray[$projactivity->duratype]*$projactivity->duration < $duration);
}

function project_condition_projactivity_actividatype_is($projactivity, $actividatype) {
  // TRUE if projactivity constraint type matches the supplied value
  return ($projactivity->actividatype == $actividatype);
}

function project_condition_projactivity_actividate_before($projactivity, $tdate) {
  // TRUE if projactivity constraint date is before the supplied date
  return ($projactivity->actividate < $tdate);
}

function project_condition_projactivity_actividate_after($projactivity, $tdate) {
  // TRUE if projactivity constraint date is after the supplied date
  return ($projactivity->actividate > $tdate);
}

function project_condition_projactivity_actualstart_before($projactivity, $tdate) {
  // TRUE if projactivity actual start date is before the supplied date
  return ($projactivity->actualstart < $tdate);
}

function project_condition_projactivity_actualstart_after($projactivity, $tdate) {
  // TRUE if projactivity actualstart date is after the supplied date
  return ($projactivity->actualstart > $tdate);
}

function project_condition_projactivity_actualfinish_before($projactivity, $tdate) {
  // TRUE if projactivity actual finish date is before the supplied date
  return ($projactivity->actualfinish < $tdate);
}

function project_condition_projactivity_actualfinish_after($projactivity, $tdate) {
  // TRUE if projactivity actualfinish date is after the supplied date
  return ($projactivity->actualfinish > $tdate);
}

function project_condition_projreport_projrepdate_before($projreport, $tdate) {
  // TRUE if project report date is before the supplied date
  return ($projreport->projrepdate < $tdate);
}

function project_condition_projreport_projrepdate_after($projreport, $tdate) {
  // TRUE if project report date is after the supplied date
  return ($projreport->projrepdate > $tdate);
}


/**
 * Implementation of hook_rules_action_info
 */
function project_rules_action_info() {
  // Specify actions associated with project records
  $actions['project_action_project_set_projcategory'] = array(
    'label' => t('Set project category to {value}'),
    'module' => t('Project'),
    'arguments' => array(
      'project' => array('type' => 'project', 'label' => t('Project')),
      'projcategory' => array('type' => 'string', 'label' => t('New category')),
    ),
    'help' => t('The category of this project will be changed to the selected value'),
  );
  $actions['project_action_project_set_projstatus'] = array(
    'label' => t('Set project status to {value}'),
    'module' => t('Project'),
    'arguments' => array(
      'project' => array('type' => 'project', 'label' => t('project')),
      'projstatus' => array('type' => 'string', 'label' => t('New status')),
    ),
    'help' => t('The status of this project will be changed to the selected value'),
  );
  $actions['project_action_project_add_note'] = array(
    'label' => t('Add project note: {text}'),
    'module' => t('Project'),
    'arguments' => array(
      'project' => array('type' => 'project', 'label' => t('project')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this project record'),
  );

  // Specify actions associated with projactivity records
  $actions['project_action_projactivity_set_activicategory'] = array(
    'label' => t('Set project activity category to {value}'),
    'module' => t('Project'),
    'arguments' => array(
      'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
      'activicategory' => array('type' => 'string', 'label' => t('New category')),
    ),
    'help' => t('The project activity category will be set to the specified value'),
  );
  $actions['project_action_projactivity_set_activistatus'] = array(
    'label' => t('Set project activity status to {value}'),
    'module' => t('Project'),
    'arguments' => array(
      'projactivity' => array('type' => 'projactivity', 'label' => t('Project activity')),
      'activistatus' => array('type' => 'string', 'label' => t('New status')),
    ),
    'help' => t('The project activity status will be set to the specified value'),
  );
  $actions['project_action_projactivity_add_note'] = array(
    'label' => t('Add projactivity note: {text}'),
    'module' => t('Project'),
    'arguments' => array(
      'projactivity' => array('type' => 'projactivity', 'label' => t('projactivity')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this projactivity record'),
  );

  // Specify actions associated with project report records
  $actions['project_action_projreport_add_note'] = array(
    'label' => t('Add project report note: {text}'),
    'module' => t('Project'),
    'arguments' => array(
      'projreport' => array('type' => 'projreport', 'label' => t('project report')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this project report record'),
  );

  return $actions;
}

/**
 * Mini forms to collect parameters for above action processing
 */
function project_action_project_set_projcategory_form($settings, &$form) {
  $param = 'projcategory';
  $name = t('Category');
  $desc = t('Chose new category');
  $opts = project_get_categories();
  project_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function project_action_project_set_projstatus_form($settings, &$form) {
  $param = 'projstatus';
  $name = t('Status');
  $desc = t('Chose new status');
  $opts = project_get_statuses();
  project_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function project_action_project_set_activicategory_form($settings, &$form) {
  $param = 'activicategory';
  $name = t('Category');
  $desc = t('Chose new category');
  $opts = project_get_categories();
  project_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function project_action_project_set_activistatus_form($settings, &$form) {
  $param = 'activistatus';
  $name = t('Status');
  $desc = t('Chose new status');
  $opts = project_get_statuses();
  project_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function project_action_set_parameter_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for updating
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
 //orgright_debug_dump('=== settings ===',$settings);
 //orgright_debug_dump('=== form ===',$form);
}

/**
 * Rules action callback functions
 * Each must implement the action specified
 */
function project_action_project_set_projcategory($project, $projcategory) {
  // Update the project node with the new category
  $project->projcategory = $projcategory;
  $project->rules_update = TRUE;
  return array('project' => $project);
}

function project_action_project_set_projstatus($project, $projstatus) {
  // Update the project node with the new status
  $project->projstatus = $projstatus;
  $project->rules_update = TRUE;
  return array('project' => $project);
}

function project_action_project_add_note($project, $note) {
  // Add the new note to the front of the existing notes
  $project->notes = $note . '; ' . $project->notes;
  $project->rules_update = TRUE;
  return array('project' => $project);
}

function project_action_projactivity_set_activicategory($projactivity, $activicategory) {
  // Set the project activity category to the sepcified value
  $projactivity->activicategory = $activicategory;
  $projactivity->rules_update = TRUE;
  return array('projactivity' => $projactivity);
}

function project_action_projactivity_set_activistatus($projactivity, $activistatus) {
  // Set the project activity status to the specified value
  $projactivity->activistatus = $activistatus;
  $projactivity->rules_update = TRUE;
  return array('projactivity' => $projactivity);
}

function project_action_projactivity_add_note($projactivity, $note) {
  // Add the new note to the front of the existing notes
  $projactivity->notes = $note . '; ' . $projactivity->notes;
  $projactivity->rules_update = TRUE;
  return array('projactivity' => $projactivity);
}

function project_action_projreport_add_note($projreport, $note) {
  // Add the new note to the front of the existing notes
  $projreport->notes = $note . '; ' . $projreport->notes;
  $projreport->rules_update = TRUE;
  return array('projreport' => $projreport);
}
