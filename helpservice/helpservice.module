<?php
// $Id$
/**
 * @file helpservice.module
 *
 * Pluggable system to provide help facilities for orgRight modules.
 * This module is derived from the "Advanced Help" module in Drupal contrib.
 *
 * Modules utilizing this help system should create a 'MODULENAME.helpservice.ini'
 * file in their module directory. This ini file should be formatted like this:
 *
 * @code
 * [TOPIC_1]
 * title = "Title of Topic 1"
 * file = "directory/filename"
 *
 * [TOPIC_2]
 * title = "Title of Topic 2"
 * file = "directory/filename" of topic, without the .html extension
 * weight = the importance of the topic on the index page
 * parent = the optional topic parent to use in the breadcrumb. Can be either topic or module%topic
 * @endcode
 *
 * All topics are addressed by the module that provides the topic, and the topic
 * id. Links may be embedded as in the following example:
 *
 * @code
 * $output .= theme('helpservice_topic', $module, $topic);
 * @endcode
 *
 * Link to other topics using <a href="topic:module/topic">. (Using
 * this format ensures the popup status remains consistent for all
 * links.)
 */

/**
 * Implementation of hook_menu().
 */
function helpservice_menu() {
  // View help topic index.
  $items['helpservice'] = array(
    'title' => 'orgRight Help',
    'page callback' => 'helpservice_index_page',
    'access arguments' => array('view orgright help index'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'orgright',
    'weight' => 9,
  );
  $items['helpservice/search/%menu_tail'] = array(
    'title' => 'Search orgRight Help',
    'page callback' => 'helpservice_search_view',
    'page arguments' => array('helpservice'),
    'access arguments' => array('view orgright help index'),
  );
  // View help topic.
  $items['helpservice/%/%'] = array(
    'page callback' => 'helpservice_topic_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('view orgright help topic'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Inplementation of hook_menu_alter().
 **/
function helpservice_menu_alter(&$menu_entries) {
  // We need to fix the menu item provided by search module to restrict access.
  $menu_entries['search/helpservice/%menu_tail']['access callback'] = 'user_access';
  $menu_entries['search/helpservice/%menu_tail']['access arguments'] = array('view orgright help index');
}

/**
 * Implementation of hook_perm().
 */
function helpservice_perm() {
  return array(
    'view orgright help topic',
    'view orgright help popup',
    'view orgright help index',
  );
}

/**
 * Implementation of hook_theme().
 */
function helpservice_theme() {
  $hooks['helpservice_topic'] = array(
    'arguments' => array('module' => NULL, 'topic' => NULL),
  );

  $hooks['helpservice_popup'] = array(
    'arguments' => array('content' => NULL),
    'template' => 'helpservice-popup',
  );

  return $hooks;
}

function helpservice_uasort($id_a, $id_b) {
  $topics = helpservice_get_topics();
  list($module_a, $topic_a) = $id_a;
  $a = $topics[$module_a][$topic_a];
  list($module_b, $topic_b) = $id_b;
  $b = $topics[$module_b][$topic_b];

  $a_weight = isset($a['weight']) ? $a['weight'] : 0;
  $b_weight = isset($b['weight']) ? $b['weight'] : 0;
  if ($a_weight != $b_weight) {
    return ($a_weight < $b_weight) ? -1 : 1;
  }

  if ($a['title'] != $b['title']) {
    return ($a['title'] < $b['title']) ? -1 : 1;
  }
  return 0;
}

/**
 * Page callback for orgRight help search.
 */
function helpservice_search_view() {
  if (!module_exists('search')) {
    return MENU_NOT_FOUND;
  }

  $breadcrumb[] = helpservice_l(t('orgRight Help'), 'helpservice');

  if (!isset($_POST['form_id'])) {
    $keys = search_get_keys();
    // Only perform search if there is non-whitespace search term:
    $results = '';
    if (trim($keys)) {

      // Collect the search results:
      $results = search_data($keys, 'helpservice');

      if ($results) {
        $results = theme('box', t('Search results'), $results);
      }
      else {
        $results = theme('box', t('Your search yielded no results'), search_help('search#noresults', drupal_help_arg()));
      }
    }

    $output = $results;
    // Construct the search form.
    $output .= drupal_get_form('helpservice_search_form', $keys);

  }
  else {
    $output = drupal_get_form('helpservice_search_form', empty($keys) ? '' : $keys);
  }

  $popup = !empty($_GET['popup']) && user_access('view orgright help popup');
  if ($popup) {
    $GLOBALS['devel_shutdown'] = FALSE; // Prevent devel module from spewing.
    module_invoke('admin_menu', 'suppress'); // Suppress admin_menu.
    drupal_set_breadcrumb(array_reverse($breadcrumb));
    print theme('helpservice_popup', $output);
    return;
  }

  $breadcrumb = array_merge(drupal_get_breadcrumb(), array_reverse($breadcrumb));
  drupal_set_breadcrumb($breadcrumb);
  return $output;
}

/**
 * Page callback to view the orgRight help service topic index.
 */
function helpservice_index_page($module = '') {
  $topics = helpservice_get_topics();
  $settings = helpservice_get_settings();

  $output = '';
  $breadcrumb = array();
  if ($module) {
    if (empty($topics[$module])) {
      return drupal_not_found();
    }

    helpservice_get_topic_hierarchy($topics);
    $items = helpservice_get_tree($topics, $topics[$module]['']['children']);

    $breadcrumb[] = helpservice_l(t('orgRight Help'), 'helpservice');

    drupal_set_title(t('@module Help Index', array('@module' => helpservice_get_module_name($module))));
    $output .= theme('item_list', $items);
  }
  else {
    // Print a module index.
    $modules = array();
    $result = db_query("SELECT * FROM {system}");
    while ($info = db_fetch_object($result)) {
      $module_info = unserialize($info->info);
      $module = $info->name;
      if (empty($topics[$module]) || isset($settings[$module]['hide'])) {
        continue;
      }
      if (isset($settings[$module]['index name'])) {
        $name = $settings[$module]['index name'];
      }
      elseif (isset($settings[$module]['name'])) {
        $name = $settings[$module]['name'];
      }
      else {
        $name = t($module_info['name']);
      }
      // add weight (as string of length 3) to front of name for sort
      if (!$weight = $settings[$module]['weight']) {
        $weight = 0;
      }
      $name = substr('000' . $weight, -3) . $name;
      $modules[$name] = $module;
    }

    ksort($modules);

    $items = array();
    foreach ($modules as $name => $module) {
      // strip the three character weight value from front of name
      $items[] = helpservice_l(substr($name, 3), "helpservice/$module");
    }

    drupal_set_title(t('orgRight Help Index'));
    $output .= theme('item_list', $items);
  }

  $popup = !empty($_GET['popup']) && user_access('view orgright help popup');
  if ($popup) {
    $GLOBALS['devel_shutdown'] = FALSE; // Prevent devel module from spewing.
    module_invoke('admin_menu', 'suppress'); // Suppress admin_menu.
    drupal_set_breadcrumb(array_reverse($breadcrumb));
    print theme('helpservice_popup', $output);
    return;
  }

  $breadcrumb = array_merge(drupal_get_breadcrumb(), array_reverse($breadcrumb));
  drupal_set_breadcrumb($breadcrumb);

  // Print a search widget.
  if (module_exists('search')) {
    $output .= drupal_get_form('helpservice_search_form');
  }
  else {
    $output .= t('Enable the search module to search help.');
  }

  return $output;
}

/**
 * Build a tree of orgRight help topics.
 */
function helpservice_get_tree($topics, $topic_ids, $max_depth = -1, $depth = 0) {
  uasort($topic_ids, 'helpservice_uasort');
  $items = array();
  foreach ($topic_ids as $info) {
    list($module, $topic) = $info;
    $item = helpservice_l($topics[$module][$topic]['title'], "helpservice/$module/$topic");
    if (!empty($topics[$module][$topic]['children']) && ($max_depth == -1 || $depth < $max_depth)) {
      $item .= theme('item_list', helpservice_get_tree($topics, $topics[$module][$topic]['children'], $max_depth, $depth + 1));
    }

    $items[] = $item;
  }

  return $items;
}

/**
 * Build a hierarchy for a single module's topics.
 */
function helpservice_get_topic_hierarchy(&$topics) {
  foreach ($topics as $module => $module_topics) {
    foreach ($module_topics as $topic => $info) {
      $parent_module = $module;
      // We have a blank topic that we don't want parented to
      // itself.
      if (!$topic) {
        continue;
      }

      if (empty($info['parent'])) {
        $parent = '';
      }
      else {
        if (strpos($info['parent'], '%')) {
          list($parent_module, $parent) = explode('%', $info['parent']);
          if (empty($topics[$parent_module][$parent])) {
            // If it doesn't exist, top level.
            $parent = '';
          }
        }
        else {
          $parent = $info['parent'];
          if (empty($module_topics[$parent])) {
            // If it doesn't exist, top level.
            $parent = '';
          }
        }
      }

      if (!isset($topics[$parent_module][$parent]['children'])) {
        $topics[$parent_module][$parent]['children'] = array();
      }
      $topics[$parent_module][$parent]['children'][] = array($module, $topic);
      $topics[$module][$topic]['_parent'] = array($parent_module, $parent);
    }
  }
}

/**
 * Form builder callback to build the search form.
 */
function helpservice_search_form(&$form_state, $keys = '') {
  $form = search_form($form_state, helpservice_url('helpservice'), $keys, 'helpservice', t('Search orgRight help'));
  require_once './' . drupal_get_path('module', 'search') . '/search.pages.inc';

  $form['basic']['inline']['submit']['#validate'] = array('search_form_validate');
  $form['basic']['inline']['submit']['#submit'] = array('helpservice_search_form_submit');

  return $form;
}

/**
 * Process a search form submission.
 */
function helpservice_search_form_submit($form, &$form_state) {
  $keys = $form_state['values']['processed_keys'];
  if ($keys == '') {
    form_set_error('keys', t('Please enter some keywords.'));
    return;
  }

  $popup = !empty($_GET['popup']) && user_access('view orgright help popup');

  if ($popup) {
    $form_state['redirect'] = array('helpservice/search/' . $keys, 'popup=true');
  }
  else {
    $form_state['redirect'] = 'helpservice/search/' . $keys;
  }
}


/**
 * Small helper function to get a module's proper name.
 */
function helpservice_get_module_name($module) {
  $settings = helpservice_get_settings();
  if (isset($settings[$module]['name'])) {
    $name = $settings[$module]['name'];
  }
  else {
    $info = db_fetch_object(db_query("SELECT * FROM {system} WHERE name = '%s'", $module));
    $info = unserialize($info->info);
    $name = t($info['name']);
  }
  return $name;
}

/**
 * Page callback to view a help topic.
 */
function helpservice_topic_page($module, $topic, $bookmark = NULL) {
  $info = helpservice_get_topic($module, $topic);
  if (!$info) {
    return drupal_not_found();
  }

  $popup = !empty($_GET['popup']) && user_access('view orgright help popup');

  drupal_set_title($info['title']);

  // Set up breadcrumb.
  $breadcrumb = array();

  $parent = $info;
  $pmodule = $module;

  // Loop checker.
  $checked = array();
  while (!empty($parent['parent'])) {
    if (strpos($parent['parent'], '%')) {
      list($pmodule, $ptopic) = explode('%', $parent['parent']);
    }
    else {
      $ptopic = $parent['parent'];
    }

    if (!empty($checked[$pmodule][$ptopic])) {
      break;
    }
    $checked[$pmodule][$ptopic] = TRUE;

    $parent = helpservice_get_topic($pmodule, $ptopic);
    if (!$parent) {
      break;
    }

    $breadcrumb[] = helpservice_l($parent['title'], "helpservice/$pmodule/$ptopic");
  }

  $breadcrumb[] = helpservice_l(helpservice_get_module_name($pmodule), "helpservice/$pmodule");
  $breadcrumb[] = helpservice_l(t('orgRight Help'), "helpservice");

  $output = helpservice_view_topic($module, $topic, $bookmark, $popup);
  if (empty($output)) {
    $output = t('Missing help topic.');
  }

  if ($popup) {
    $GLOBALS['devel_shutdown'] = FALSE; // Prevent devel module from spewing.
    module_invoke('admin_menu', 'suppress'); // Suppress admin_menu.
    drupal_set_breadcrumb(array_reverse($breadcrumb));
    print theme('helpservice_popup', $output);
    return;
  }

  drupal_add_css(drupal_get_path('module', 'helpservice') . '/helpservice.css');
  $breadcrumb[] = l(t('Home'), '<front>');
  drupal_set_breadcrumb(array_reverse($breadcrumb));

  // Print a search widget.
  if (module_exists('search')) {
    $output .= drupal_get_form('helpservice_search_form');
  }
  else {
    $output .= t('Enable the search module to search help.');
  }

  return $output;
}

/**
 * Display a help icon with a link to view the topic in a popup.
 *
 * @param $module
 *   The module that owns this help topic.
 * @param $topic
 *   The identifier for the topic
 * @param $type
 *   - 'icon' to display the question mark icon
 *   - 'title' to display the topic's title
 *   - any other text to display the text. Be sure to t() it!
 */
function theme_helpservice_topic($module, $topic, $type = 'icon') {
  // ignore a bookmark specification if present
  if ($ix = strpos($topic, '/')) {
    $info = helpservice_get_topic($module, substr($topic, 0, $ix));
  }
  else {
    $info = helpservice_get_topic($module, $topic);
  }
  if (!$info) {
    return;
  }

  switch ($type) {
    case 'icon':
      $text = '<span>' . t('Help') . '</span>';
      $class = 'helpservice-link';
      break;
    case 'title':
      $text = $info['title'];
      $class = 'helpservice-title';
      break;
    default:
      $class = 'helpservice-title';
      $text = $type;
      break;
  }

  if (user_access('view orgright help popup')) {
    drupal_add_css(drupal_get_path('module', 'helpservice') . '/helpservice-icon.css');
    $tlink = l($text, "helpservice/$module/$topic", array(
        'attributes' => array(
          'class' => $class,
          'tabindex' => '0',
          'onclick' => 'var w=window.open(this.href, "helpservice_window", "width=' . $info['popup width'] . ',height=' . $info['popup height'] . ',scrollbars,resizable"); w.focus(); return false;',
          'title' => $info['title'],
        ),
        'query' => array('popup' => TRUE),
        'html' => TRUE)
    );
  }
  else {
    $tlink = l($text, "helpservice/$module/$topic", array(
        'attributes' => array(
          'class' => $class,
          'title' => $info['title']
        ),
        'html' => TRUE)
    );
  }
  return $tlink;
}

/**
 * Load and render a help topic.
 */
function helpservice_get_topic_filename($module, $topic) {
  $info = helpservice_get_topic_file_info($module, $topic);
  if ($info) {
    return "./$info[path]/$info[file]";
  }
}

/**
 * Load and render a help topic.
 */
function helpservice_get_topic_file_info($module, $topic) {
  init_theme();
  global $language;

  $info = helpservice_get_topic($module, $topic);
  if (empty($info)) {
    return;
  }

  // Search paths:
  $paths = array(
    path_to_theme() . '/helpservice', // Allow theme override.
    drupal_get_path('module', $module) . "/translations/helpservice/$language->language", // Translations.
    $info['path'], // In same directory as .inc file.
  );

  foreach ($paths as $path) {
    if (file_exists("./$path/$info[file]")) {
      return array('path' => $path, 'file' => $info['file']);
    }
  }
}

/**
 * Load and render a help topic.
 */
function helpservice_view_topic($module, $topic, $bookmark = '', $popup = FALSE) {
  //orgright_debug_msg('helpservice','Fn: helpservice_view_topic, module='.$module.', topic='.$topic.', bookmark='.$bookmark);
  $file_info = helpservice_get_topic_file_info($module, $topic);
  if ($file_info) {
    $info = helpservice_get_topic($module, $topic);
    $file = "./$file_info[path]/$file_info[file]";

    // @todo is this trusted output?
    $output = file_get_contents($file);

    // If a bookmark was specified, then extract just that part of the file
    $matches = array();
    if ($bookmark && preg_match('/<!--&' . $bookmark . '-->(.*?)<!--&/s', $output, $matches)) {
      $output = $matches[1];
    }
    // Make some exchanges. The strtr is because url() translates $ into %24
    // but we need to change it back for the regex replacement.

    // Change 'topic:' to the URL for another help topic.
    if ($popup) {
      $output = preg_replace('/href="topic:([^"]+)"/', 'href="' . strtr(url('helpservice/$1', array('query' => 'popup=true')), array('%24' => '$')) . '"', $output);
      $output = preg_replace('/src="topic:([^"]+)"/', 'src="' . strtr(url('helpservice/$1', array('query' => 'popup=true')), array('%24' => '$')) . '"', $output);
      $output = preg_replace('/&topic:([^"]+)&/', strtr(url('helpservice/$1', array('query' => 'popup=true')), array('%24' => '$')), $output);
    }
    else {
      $output = preg_replace('/href="topic:([^"]+)"/', 'href="' . strtr(url('helpservice/$1'), array('%24' => '$')) . '"', $output);
      $output = preg_replace('/src="topic:([^"]+)"/', 'src="' . strtr(url('helpservice/$1'), array('%24' => '$')) . '"', $output);
      $output = preg_replace('/&topic:([^"]+)&/', strtr(url('helpservice/$1'), array('%24' => '$')), $output);
    }

    global $base_path;

    // Change 'path:' to the URL to the base help directory.
    $output = preg_replace('/href="path:([^"]+)"/', 'href="' . $base_path . $info['path'] . '/$1"', $output);
    $output = preg_replace('/src="path:([^"]+)"/', 'src="' . $base_path . $info['path'] . '/$1"', $output);
    $output = str_replace('&path&', $base_path . $info['path'] . '/', $output);

    // Change 'trans_path:' to the URL to the actual help directory.
    $output = preg_replace('/href="trans_path:([^"]+)"/', 'href="' . $base_path . $file_info['path'] . '/$1"', $output);
    $output = preg_replace('/src="trans_path:([^"]+)"/', 'src="' . $base_path . $file_info['path'] . '/$1"', $output);
    $output = str_replace('&trans_path&', $base_path . $file_info['path'] . '/', $output);

    // Change 'base_url:' to the URL to the site.
    $output = preg_replace('/href="base_url:([^"]+)"/', 'href="' . strtr(url('$1'), array('%24' => '$')) . '"', $output);
    $output = preg_replace('/src="base_url:([^"]+)"/', 'src="' . strtr(url('$1'), array('%24' => '$')) . '"', $output);
    $output = str_replace('&base_url&', $base_path, $output);

    // Remove the initial header line.
    $output = preg_replace('/^<!--[^\n]*-->\n/', '', $output);
    // Remove file bookmark comments
    $output = preg_replace('/<!--&.*?-->/', '', $output);
    // Run the line break filter if requested
    if (!empty($info['line break'])) {
      $output = _filter_autop($output);
    }

    if (!empty($info['navigation'])) {
      $topics = helpservice_get_topics();
      helpservice_get_topic_hierarchy($topics);
      if (!empty($topics[$module][$topic]['children'])) {
        $items = helpservice_get_tree($topics, $topics[$module][$topic]['children']);
        $output .= theme('item_list', $items);
      }

      list($parent_module, $parent_topic) = $topics[$module][$topic]['_parent'];
      if ($parent_topic) {
        $parent = $topics[$module][$topic]['_parent'];
        $up = "helpservice/$parent[0]/$parent[1]";
      }
      else {
        $up = "helpservice/$module";
      }

      $siblings = $topics[$parent_module][$parent_topic]['children'];
      uasort($siblings, 'helpservice_uasort');
      $prev = $next = NULL;
      $found = FALSE;
      foreach ($siblings as $sibling) {
        list($sibling_module, $sibling_topic) = $sibling;
        if ($found) {
          $next = $sibling;
          break;
        }
        if ($sibling_module == $module && $sibling_topic == $topic) {
          $found = TRUE;
          continue;
        }
        $prev = $sibling;
      }

      if ($prev || $up || $next) {
        $navigation = '<div class="helpservice-navigation clear-block">';

        if ($prev) {
          $navigation .= helpservice_l('<< ' . $topics[$prev[0]][$prev[1]]['title'], "helpservice/$prev[0]/$prev[1]", array('attributes' => array('class' => 'helpservice-left')));
        }
        if ($up) {
          $navigation .= helpservice_l(t('Up'), $up, array('attributes' => array('class' => $prev ? 'helpservice-up' : 'helpservice-up-noleft')));
        }
        if ($next) {
          $navigation .= helpservice_l($topics[$next[0]][$next[1]]['title'] . ' >>', "helpservice/$next[0]/$next[1]", array('attributes' => array('class' => 'helpservice-right')));
        }

        $navigation .= '</div>';

        $output .= $navigation;
      }
    }

    if (!empty($info['css'])) {
      drupal_add_css($info['path'] . '/' . $info['css']);
    }

    $output = '<div class="helpservice-topic">' . $output . '</div>';
    drupal_alter('helpservice_topic', $output, $popup);
    return $output;
  }
}

/**
 * Get the information for a single help topic.
 */
function helpservice_get_topic($module, $topic) {
  $topics = helpservice_get_topics();
  if (!empty($topics[$module][$topic])) {
    return $topics[$module][$topic];
  }
}

/**
 * Search the system for all available help topics.
 */
function helpservice_get_topics() {
  $cache = _helpservice_parse_ini();
  return $cache['topics'];
}

function helpservice_get_settings() {
  $cache = _helpservice_parse_ini();
  return $cache['settings'];
}

function _helpservice_parse_ini() {
  static $cache = NULL;

  if (!isset($cache)) {
    $cache = array('topics' => array(), 'settings' => array());

    foreach (module_list() as $module) {
      $module_path = drupal_get_path('module', $module);
      $info = array();
      if (file_exists("$module_path/$module.helpservice.ini")) {
        $path = "$module_path";
        $info = parse_ini_file("./$module_path/$module.helpservice.ini", TRUE);
      }

      if (!empty($info)) {
        // Get translated titles:
        global $language;
        $translation = array();
        if (file_exists("$module_path/translations/$language->language/$module.helpservice.ini")) {
          $translation = parse_ini_file("$module_path/translations/$language->language/$module.helpservice.ini", TRUE);
        }

        $cache['settings'][$module] = array();
        if (!empty($info['helpservice settings'])) {
          $cache['settings'][$module] = $info['helpservice settings'];
          unset($info['helpservice settings']);

          // Check translated strings for translatable global settings.
          if (isset($translation['helpservice settings']['name'])) {
            $cache['settings']['name'] = $translation['helpservice settings']['name'];
          }
          if (isset($translation['helpservice settings']['index name'])) {
            $cache['settings']['index name'] = $translation['helpservice settings']['index name'];
          }

        }

        foreach ($info as $name => $topic) {
          // Each topic should have a name, a title, a file and of course the path.
          $file = !empty($topic['file']) ? $topic['file'] : $name;
          $cache['topics'][$module][$name] = array(
            'name' => $name,
            'title' => !empty($translation[$name]['title']) ? $translation[$name]['title'] : $topic['title'],
            'weight' => isset($topic['weight']) ? $topic['weight'] : 0,
            'parent' => isset($topic['parent']) ? $topic['parent'] : 0,
            'popup width' => isset($topic['popup width']) ? $topic['popup width'] : 500,
            'popup height' => isset($topic['popup height']) ? $topic['popup height'] : 500,
            'file' => isset($topic['readme file']) ? $file : $file . '.html', // require extension
            'path' => $path, // not in .ini file
            'line break' => isset($topic['line break']) ? $topic['line break'] : (isset($cache['settings'][$module]['line break']) ? $cache['settings'][$module]['line break'] : FALSE),
            'navigation' => isset($topic['navigation']) ? $topic['navigation'] : (isset($cache['settings'][$module]['navigation']) ? $cache['settings'][$module]['navigation'] : TRUE),
            'css' => isset($topic['css']) ? $topic['css'] : (isset($cache['settings'][$module]['css']) ? $cache['settings'][$module]['css'] : NULL),
          );
        }
      }
    }
    drupal_alter('helpservice_topic_info', $cache);
  }
  return $cache;
}

/**
 * Implementation of hook_search()
 */
function helpservice_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      return t('orgRight Help');
    case 'reset':
      variable_del('helpservice_last_cron');
      return;
    case 'search':
      $topics = helpservice_get_topics();
      $find = do_search($keys, 'helpservice');
      if (!$find) {
        return;
      }

      $results = array();

      $placeholders = implode(', ', array_fill(0, count($find), '%d'));
      foreach ($find as $item) {
        $sids[] = $item->sid;
      }

      $result = db_query("SELECT * FROM {org_helpservice} WHERE sid IN ($placeholders)", $sids);
      while ($sid = db_fetch_object($result)) {
        // Guard against removed help topics that are still indexed.
        if (empty($topics[$sid->module][$sid->topic])) {
          continue;
        }
        $info = $topics[$sid->module][$sid->topic];
        $text = helpservice_view_topic($sid->module, $sid->topic);
        $results[] = array('link' => helpservice_url("helpservice/$sid->module/$sid->topic"),
          'title' => $info['title'],
          'snippet' => search_excerpt($keys, $text));
      }
      return $results;
  }
}

/**
 * Get or create an sid (search id) that correllates to each topic for
 * the search system.
 */
function helpservice_get_sids(&$topics) {
  global $language;
  $result = db_query("SELECT * FROM {org_helpservice} WHERE language = '%s'", $language->language);
  while ($sid = db_fetch_object($result)) {
    if (empty($topics[$sid->module][$sid->topic])) {
      db_query("DELETE FROM {org_helpservice} WHERE sid = %d", $sid->sid);
    }
    else {
      $topics[$sid->module][$sid->topic]['sid'] = $sid->sid;
    }
  }
}

/**
 * Implementation of hook_update_index().
 */
function helpservice_update_index() {
  global $language;

  // If we got interrupted by limit, this will contain the last module
  // and topic we looked at.
  $last = variable_get('helpservice_last_cron', array('time' => 0));
  $limit = intval(variable_get('search_cron_limit', 100));
  $topics = helpservice_get_topics();
  helpservice_get_sids($topics);

  $count = 0;

  foreach ($topics as $module => $module_topics) {
    // Fast forward if necessary.
    if (!empty($last['module']) && $last['module'] != $module) {
      continue;
    }

    foreach ($module_topics as $topic => $info) {
      // Fast forward if necessary.
      if (!empty($last['topic']) && $last['topic'] != $topic) {
        continue;
      }

      // If we've been looking to catch up, and we have, reset so we
      // stop fast forwarding.
      if (!empty($last['module'])) {
        unset($last['topic']);
        unset($last['module']);
      }

      $file = helpservice_get_topic_filename($module, $topic);
      if ($file && (empty($info['sid']) || filemtime($file) > $last['time'])) {
        if (empty($info['sid'])) {
          db_query("INSERT INTO {org_helpservice} (module, topic, language) VALUES ('%s', '%s', '%s')", $module, $topic, $language->language);
          $info['sid'] = db_last_insert_id('helpservice_index', 'sid');
        }

        search_index($info['sid'], 'helpservice', '<h1>' . $info['title'] . '</h1>' . file_get_contents($file));
        $count++;
        if ($count >= $limit) {
          $last['topic'] = $topic;
          $last['module'] = $module;
          // Don't change time if we stop.
          variable_set('helpservice_last_cron', $last);
          return;
        }
      }
    }
  }
  variable_set('helpservice_last_cron', array('time' => time()));
}

/**
 * Fill in a bunch of page variables for our specialized popup page.
 */
function template_preprocess_helpservice_popup(&$variables) {
  // Add favicon.
  if (theme_get_setting('toggle_favicon')) {
    drupal_set_html_head('<link rel="shortcut icon" href="' . check_url(theme_get_setting('favicon')) . '" type="image/x-icon" />');
  }

  global $theme;
  // Construct page title.
  if (drupal_get_title()) {
    $head_title = array(strip_tags(drupal_get_title()), variable_get('site_name', 'Drupal'));
  }
  else {
    $head_title = array(variable_get('site_name', 'Drupal'));
    if (variable_get('site_slogan', '')) {
      $head_title[] = variable_get('site_slogan', '');
    }
  }

  drupal_add_css(drupal_get_path('module', 'helpservice') . '/helpservice-popup.css');
  drupal_add_css(drupal_get_path('module', 'helpservice') . '/helpservice.css');

  $variables['head_title'] = implode(' | ', $head_title);
  $variables['base_path'] = base_path();
  $variables['front_page'] = url();
  $variables['breadcrumb'] = theme('breadcrumb', drupal_get_breadcrumb());
  $variables['feed_icons'] = drupal_get_feeds();
  $variables['head'] = drupal_get_html_head();
  $variables['language'] = $GLOBALS['language'];
  $variables['language']->dir = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $variables['logo'] = theme_get_setting('logo');
  $variables['messages'] = theme('status_messages');
  $variables['site_name'] = (theme_get_setting('toggle_name') ? variable_get('site_name', 'Drupal') : '');
  $variables['css'] = drupal_add_css();
  $css = drupal_add_css();

  // Remove theme css.
  foreach ($css as $media => $types) {
    if (isset($css[$media]['theme'])) {
      $css[$media]['theme'] = array();
    }
  }

  $variables['styles'] = drupal_get_css($css);
  $variables['scripts'] = drupal_get_js();
  $variables['title'] = drupal_get_title();
  // Closure should be filled last.
  $variables['closure'] = theme('closure');
}

/**
 * Format a link but preserve popup identity.
 */
function helpservice_l($text, $dest, $options = array()) {
  $popup = !empty($_GET['popup']) && user_access('view orgright help popup');
  if ($popup) {
    if (empty($options['query'])) {
      $options['query'] = array();
    }

    if (is_array($options['query'])) {
      $options['query'] += array('popup' => TRUE);
    }
    else {
      $options['query'] += '&popup=TRUE';
    }
  }

  return l($text, $dest, $options);
}

/**
 * Format a URL but preserve popup identity.
 */
function helpservice_url($dest, $options = array()) {
  $popup = !empty($_GET['popup']) && user_access('view orgright help popup');
  if ($popup) {
    if (empty($options['query'])) {
      $options['query'] = array();
    }

    $options['query'] += array('popup' => TRUE);
  }

  return url($dest, $options);
}
