<?php
// $Id$

/**
 * @file
 * Provides orgRight Membership automation rules functionality
 * using the Rules module.  This file will define the events that
 * are generated by the membership module, along with conditions
 * and actions that can be undertaken on member, subscription,
 * and payment information items.
 *
 */

/**
 * Implementation of hook_rules_data_type_info
 *
 * Add three new data types for the three node types
 * - member
 * - subscription
 * - subscription payment ("subpayment")
 */
function membership_rules_data_type_info() {
  $datatypes['member'] = array(
    'label' => t('Member'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Membership'
  );
  $datatypes['subscription'] = array(
    'label' => t('Subscription'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Membership'
  );
  $datatypes['subpayment'] = array(
    'label' => t('Subscription payment'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Membership'
  );
  return $datatypes;
}


/**
 * Implementation of hook_rules_event_info
 */
function membership_rules_event_info() {
  // Specify events relating to member records
  $events['membership_event_member_create'] = array(
    'label' => t('Member has been created'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member')),
      'parent' => array('type' => 'member', 'label' => t('Parent member'),
        'handler' => 'membership_event_member_get_parent'),
    ),
    'help' => t(''),
  );
  $events['membership_event_member_update'] = array(
    'label' => t('Member has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member, updated details')),
      'member_old' => array('type' => 'member', 'label' => t('Current member, original details'),
        'handler' => 'membership_event_member_update_get_original'),
      'parent' => array('type' => 'member', 'label' => t('Parent member'),
        'handler' => 'membership_event_member_get_parent'),
    ),
    'help' => t(''),
  );
  $events['membership_event_member_delete'] = array(
    'label' => t('Member has been deleted'),
    'module' => 'Membership',
    'arguments' => array(
      'member_old' => array('type' => 'member', 'label' => t('Current member')),
      'parent' => array('type' => 'member', 'label' => t('Parent member'),
        'handler' => 'membership_event_member_get_parent'),
    ),
    'help' => t(''),
  );
  $events['membership_event_member_standing_update'] = array(
    'label' => t('Member status has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member, updated details')),
      'member_old' => array('type' => 'member', 'label' => t('Current member, original details'),
        'handler' => 'membership_event_member_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['membership_event_member_category_update'] = array(
    'label' => t('Member category has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member, updated details')),
      'member_old' => array('type' => 'member', 'label' => t('Current member, original details'),
        'handler' => 'membership_event_member_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['membership_event_member_pnid_update'] = array(
    'label' => t('Member parent has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member, updated details')),
      'member_old' => array('type' => 'member', 'label' => t('Current member, original details'),
        'handler' => 'membership_event_member_update_get_original'),
      'parent_new' => array('type' => 'member', 'label' => t('Updated parent'),
        'handler' => 'membership_event_member_get_parent'),
      'parent_old' => array('type' => 'member', 'label' => t('Original parent'),
        'handler' => 'membership_event_member_update_get_original_parent'),
    ),
    'help' => t(''),
  );
  $events['membership_event_member_email_update'] = array(
    'label' => t('Member email has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member, updated details')),
      'member_old' => array('type' => 'member', 'label' => t('Current member, original details'),
        'handler' => 'membership_event_member_update_get_original'),

    ),
    'help' => t(''),
  );
  $events['membership_event_member_joindate_update'] = array(
    'label' => t('Member join date has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member, updated details')),
      'member_old' => array('type' => 'member', 'label' => t('Current member, original details'),
        'handler' => 'membership_event_member_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['membership_event_member_leavedate_update'] = array(
    'label' => t('Member leave date has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'member_new' => array('type' => 'member', 'label' => t('Current member, updated details')),
      'member_old' => array('type' => 'member', 'label' => t('Current member, original details'),
        'handler' => 'membership_event_member_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to subscription records
  $events['membership_event_subscription_create'] = array(
    'label' => t('Subscription has been created'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription record')),
      'member' => array('type' => 'member', 'label' => t('Member'),
        'handler' => 'membership_event_subscription_get_member'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subscription_update'] = array(
    'label' => t('Subscription has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription record')),
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription record'),
        'handler' => 'membership_event_subscription_get_original'),
      'member' => array('type' => 'member', 'label' => t('Member'),
        'handler' => 'membership_event_subscription_get_member'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subscription_delete'] = array(
    'label' => t('Subscription has been deleted'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription record')),
      'member' => array('type' => 'member', 'label' => t('Member'),
        'handler' => 'membership_event_subscription_get_member'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subscription_mnid_update'] = array(
    'label' => t('Subscription member has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription record')),
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription record'),
        'handler' => 'membership_event_subscription_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Updated member'),
        'handler' => 'membership_event_subscription_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
        'handler' => 'membership_event_subscription_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subscription_scode_update'] = array(
    'label' => t('Subscription reference has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription record')),
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription record'),
        'handler' => 'membership_event_subscription_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subscription_datefrom_update'] = array(
    'label' => t('Subscription start date has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription record')),
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription record'),
        'handler' => 'membership_event_subscription_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subscription_dateto_update'] = array(
    'label' => t('Subscription end date has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription record')),
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription record'),
        'handler' => 'membership_event_subscription_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subscription_amount_update'] = array(
    'label' => t('Subscription amount has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription record')),
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription record'),
        'handler' => 'membership_event_subscription_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to subscription payment records
  $events['membership_event_subpayment_create'] = array(
    'label' => t('Subscription payment has been created'),
    'module' => 'Membership',
    'arguments' => array(
      'subpayment_new' => array('type' => 'subpayment', 'label' => t('Created subscription payment record')),
      'member' => array('type' => 'member', 'label' => t('Current member'),
        'handler' => 'membership_event_subpayment_get_member'),
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription'),
        'handler' => 'membership_event_subpayment_get_subscription'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subpayment_update'] = array(
    'label' => t('Subscription payment has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subpayment_new' => array('type' => 'subpayment', 'label' => t('Updated subscription payment record')),
      'subpayment_old' => array('type' => 'subpayment', 'label' => t('Original subscription payment record'),
        'handler' => 'membership_event_subpayment_get_original'),
      'member' => array('type' => 'member', 'label' => t('Current member'),
        'handler' => 'membership_event_subpayment_get_member'),
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription'),
        'handler' => 'membership_event_subpayment_get_subscription'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subpayment_delete'] = array(
    'label' => t('Subscription payment has been deleted'),
    'module' => 'Membership',
    'arguments' => array(
      'subpayment_old' => array('type' => 'subpayment', 'label' => t('Original subscription payment record')),
      'member' => array('type' => 'member', 'label' => t('Current member'),
        'handler' => 'membership_event_subpayment_get_member'),
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription'),
        'handler' => 'membership_event_subpayment_get_subscription'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subpayment_mnid_update'] = array(
    'label' => t('Subscription payment member has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subpayment_new' => array('type' => 'subpayment', 'label' => t('Updated subscription payment record')),
      'subpayment_old' => array('type' => 'subpayment', 'label' => t('Original subscription payment record'),
        'handler' => 'membership_event_subpayment_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Current member'),
        'handler' => 'membership_event_subpayment_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
        'handler' => 'membership_event_subpayment_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subpayment_snid_update'] = array(
    'label' => t('Subscription payment reference has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subpayment_new' => array('type' => 'subpayment', 'label' => t('Updated subscription payment record')),
      'subpayment_old' => array('type' => 'subpayment', 'label' => t('Original subscription payment record'),
        'handler' => 'membership_event_subpayment_update_get_original'),
      'subscription_new' => array('type' => 'subscription', 'label' => t('Updated subscription'),
        'handler' => 'membership_event_subpayment_get_subscription'),
      'subscription_old' => array('type' => 'subscription', 'label' => t('Original subscription'),
        'handler' => 'membership_event_subpayment_update_get_original_subscription'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subpayment_datepaid_update'] = array(
    'label' => t('Subscription payment date has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subpayment_new' => array('type' => 'subpayment', 'label' => t('Updated subscription payment record')),
      'subpayment_old' => array('type' => 'subpayment', 'label' => t('Original subscription payment record'),
        'handler' => 'membership_event_subpayment_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['membership_event_subpayment_payment_update'] = array(
    'label' => t('Subscription payment amount has been updated'),
    'module' => 'Membership',
    'arguments' => array(
      'subpayment_new' => array('type' => 'subpayment', 'label' => t('Updated subscription payment record')),
      'subpayment_old' => array('type' => 'subpayment', 'label' => t('Original subscription payment record'),
        'handler' => 'membership_event_subpayment_update_get_original'),
    ),
    'help' => t(''),
  );

  return $events;
}

/**
 * handlers for loading data items when required
 */
function membership_event_member_update_get_original($node) {
  return membership_event_update_get_original('member', $node);
}

function membership_event_subscription_update_get_original($node) {
  return membership_event_update_get_original('subscription', $node);
}

function membership_event_subpayment_update_get_original($node) {
  return membership_event_update_get_original('subpayment', $node);
}

function membership_event_update_get_original($type, $node) {
  // The passed node is the updated version, original no longer on database
  // so create a dummy copy and populate with selected data from current
  // version, and then merge in the saved original data if present
  $o_node = (object)orgright_create_node($type);
  $o_node->nid = $node->nid;
  $o_node->vid = $node->vid;
  $o_node->uid = $node->uid;
  $o_node->name = $node->name;
  if ($o_data = unserialize($node->original)) {
    foreach ($o_data as $field => $value) {
      $o_node->$field = $value;
    }
  }
  return $o_node;
}

function membership_event_member_get_parent($node) {
  return node_load($node->pnid);
}

function membership_event_subscription_get_member($node) {
  return node_load($node->mnid);
}

function membership_event_subpayment_get_member($node) {
  return node_load($node->mnid);
}

function membership_event_subpayment_get_subscription($node) {
  return node_load($node->snid);
}

function membership_event_member_update_get_original_parent($node) {
  $oldnode = membership_event_member_update_get_original($node);
  return node_load($oldnode->pnid);
}

function membership_event_subscription_update_get_original_member($node) {
  $oldnode = membership_event_subscription_update_get_original($node);
  return node_load($oldnode->mnid);
}

function membership_event_subpayment_update_get_original_member($node) {
  $oldnode = membership_event_subpayment_update_get_original($node);
  return node_load($oldnode->mnid);
}

function membership_event_subpayment_update_get_original_subscription($node) {
  $oldnode = membership_event_subpayment_update_get_original($node);
  return node_load($oldnode->snid);
}


/**
 * Implementation of hook_rules_condition_info
 */
function membership_rules_condition_info() {
  // Specify conditions relating to member records
  $conditions['membership_condition_member_category_is'] = array(
    'label' => t('Membership category is {value}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'category' => array('type' => 'string', 'label' => t('Category')),
    ),
    'help' => t('Is TRUE if membership category matches the selected value(s)'),
  );
  $conditions['membership_condition_member_standing_is'] = array(
    'label' => t('Membership status is {value}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'standing' => array('type' => 'string', 'label' => t('Status')),
    ),
    'help' => t('Is TRUE if membership status matches the selected value(s)'),
  );
  $conditions['membership_condition_member_is_primary'] = array(
    'label' => t('Membership is primary'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
    ),
    'help' => t('Is TRUE if the member has subsidiary memberships'),
  );
  $conditions['membership_condition_member_is_subsidiary'] = array(
    'label' => t('Membership is subsidiary'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
    ),
    'help' => t('Is TRUE if the member is subsidiary to another membership'),
  );
  $conditions['membership_condition_member_joined_before'] = array(
    'label' => t('Member joined before {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the date joined is earlier than the specified date'),
  );
  $conditions['membership_condition_member_joined_after'] = array(
    'label' => t('Member joined after {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the date joined is later than the specified date'),
  );
  $conditions['membership_condition_member_left_before'] = array(
    'label' => t('Member left before {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the date left is earlier than the specified date'),
  );
  $conditions['membership_condition_member_left_after'] = array(
    'label' => t('Member left after {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the date left is later than the specified date'),
  );
  $conditions['membership_condition_member_has_email'] = array(
    'label' => t('Membership email address'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
    ),
    'help' => t('Is TRUE if the member has an email address'),
  );
  $conditions['membership_condition_member_subscription_expired'] = array(
    'label' => t('Membership subscription has expired'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
    ),
    'help' => t('Is TRUE if the membership subscription has expired'),
  );

  // Specify conditions relating to subscription records
  $conditions['membership_condition_subscription_start_before'] = array(
    'label' => t('Subscription starts before {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the subscription starts before the specified date'),
  );
  $conditions['membership_condition_subscription_start_after'] = array(
    'label' => t('Subscription starts after {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the subscription starts after the specified date'),
  );
  $conditions['membership_condition_subscription_finish_before'] = array(
    'label' => t('Subscription finishes before {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the subscription finishes before the specified date'),
  );
  $conditions['membership_condition_subscription_finish_after'] = array(
    'label' => t('Subscription finishes after {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the subscription finishes after the specified date'),
  );
  $conditions['membership_condition_subscription_amount_smaller'] = array(
    'label' => t('Subscription amount smaller than {number}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'amount' => array('type' => 'number', 'label' => t('Number')),
    ),
    'help' => t('Is TRUE if the subscription amount is smaller than the specified number'),
  );
  $conditions['membership_condition_subscription_amount_bigger'] = array(
    'label' => t('Subscription amount bigger than {number}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'amount' => array('type' => 'number', 'label' => t('Number')),
    ),
    'help' => t('Is TRUE if the subscription amount is bigger than the specified number'),
  );

  // Specify conditions relating to subscription payment records
  $conditions['membership_condition_subpayment_paid_before'] = array(
    'label' => t('Subscription payment made before {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subpayment' => array('type' => 'subpayment', 'label' => t('Subscription payment')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the subscription payment is made before the specified date'),
  );
  $conditions['membership_condition_subpayment_paid_after'] = array(
    'label' => t('Subscription payment made after {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subpayment' => array('type' => 'subpayment', 'label' => t('Subscription payment')),
      'tdate' => array('type' => 'date', 'label' => t('Date')),
    ),
    'help' => t('Is TRUE if the subscription payment made after the specified date'),
  );
  $conditions['membership_condition_subpayment_amount_smaller'] = array(
    'label' => t('Subscription payment smaller than {number}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subpayment' => array('type' => 'subpayment', 'label' => t('Subscription payment')),
      'amount' => array('type' => 'number', 'label' => t('Number')),
    ),
    'help' => t('Is TRUE if the subscription payment is smaller than the specified number'),
  );
  $conditions['membership_condition_subpayment_amount_bigger'] = array(
    'label' => t('Subscription payment bigger than {number}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subpayment' => array('type' => 'subpayment', 'label' => t('Subscription payment')),
      'amount' => array('type' => 'number', 'label' => t('Number')),
    ),
    'help' => t('Is TRUE if the subscription payment is bigger than the specified number'),
  );

  return $conditions;
}

/**
 * Mini forms to collect parameters for above condition checking
 */
function membership_condition_member_category_is_form($settings, &$form) {
  $param = 'category';
  $name = t('Category');
  $desc = t('Chose category for compare');
  $opts = membership_get_categories();
  membership_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function membership_condition_member_standing_is_form($settings, &$form) {
  $param = 'standing';
  $name = t('Status');
  $desc = t('Chose status for compare');
  $opts = membership_get_standings();
  membership_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function membership_condition_parameter_is_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for checking
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
  //orgright_debug_dump('=== settings ===',$settings);
  //orgright_debug_dump('=== form ===',$form);
}

/**
 * Rules condition callback functions
 * Each must return either TRUE or FALSE
 */
function membership_condition_member_category_is($member, $category) {
  // TRUE if the membership category matches the specified value
  return ($member->category == $category);
}

function membership_condition_member_standing_is($member, $standing) {
  // TRUE if the membership standing matches the specified value
  return ($member->standing == $standing);
}

function membership_condition_member_is_primary($member) {
  // TRUE if subsidiary memberships exist for this member
  $sql = "SELECT COUNT(m.nid) FROM {node} n JOIN {org_members} m ON m.nid = n.nid WHERE m.vid = n.vid AND m.pnid = %d";
  return db_result(db_query($sql, $member->nid));
}

function membership_condition_member_is_subsidary($member) {
  // TRUE if this member has a parent membership
  return $member->pnid;
}

function membership_condition_member_joined_before($member, $tdate) {
  // TRUE if the date joined is earlier than the supplied date
  return ($member->joindate < $tdate);
}

function membership_condition_member_joined_after($member, $tdate) {
  // TRUE if the date joined is later than the supplied date
  return ($member->joindate > $tdate);
}

function membership_condition_member_left_before($member, $tdate) {
  // TRUE if the date joined is earlier than the supplied date
  return ($member->leavedate < $tdate);
}

function membership_condition_member_left_after($member, $tdate) {
  // TRUE if the date joined is later than the supplied date
  return ($member->leavedate > $tdate);
}

function membership_condition_member_has_email($member) {
  // TRUE if the membership includes a valid email address
  // should really be using function "maillist_check_address"
  return (isset($member->email)) ? TRUE : FALSE;
}

function membership_condition_member_subscription_expired($member) {
  // TRUE if membership subscription has expired
  $sql = "SELECT s.dateto FROM {node} n JOIN {org_subscriptions} s ON s.nid = n.nid WHERE s.vid = n.vid AND s.nid = %d  ORDER BY dateto DESC";
  $sub = db_fetch_object(db_query($sql, $member->nid));
  return ($sub && $sub->dateto >= orgright_get_date_ymd()) ? TRUE : FALSE;
}

function membership_condition_subscription_start_before($subscription, $tdate) {
  // TRUE if subscription starts before the supplied date
  return ($subscription->fromdate < $tdate);
}

function membership_condition_subscription_start_after($subscription, $tdate) {
  // TRUE if subscription starts after the supplied date
  return ($subscription->fromdate > $tdate);
}

function membership_condition_subscription_finish_before($subscription, $tdate) {
  // TRUE if subscription finishes before the supplied date
  return ($subscription->todate < $tdate);
}

function membership_condition_subscription_finish_after($subscription, $tdate) {
  // TRUE if subscription finishes after the supplied date
  return ($subscription->todate > $tdate);
}

function membership_condition_subscription_amount_smaller($subscription, $amount) {
  // TRUE if subscription amount is smaller then the supplied number
  return ($subscription->amount < $amount);
}

function membership_condition_subscription_amount_bigger($subscription, $amount) {
  // TRUE if subscription amount is bigger then the supplied number
  return ($subscription->amount > $amount);
}

function membership_condition_subpayment_paid_before($subpayment, $tdate) {
  // TRUE if subscription payment made before the supplied date
  return ($subpayment->datepaid < $tdate);
}

function membership_condition_subpayment_paid_after($subpayment, $tdate) {
  // TRUE if subscription payment made after the supplied date
  return ($subpayment->datepaid > $tdate);
}

function membership_condition_subpayment_amount_smaller($subpayment, $amount) {
  // TRUE if subscription payment is smaller then the supplied number
  return ($subpayment->payment < $amount);
}

function membership_condition_subpayment_amount_bigger($subpayment, $amount) {
  // TRUE if subscription payment is bigger then the supplied number
  return ($subpayment->payment > $amount);
}


/**
 * Implementation of hook_rules_action_info
 */
function membership_rules_action_info() {
  // Specify actions associated with member records
  $actions['membership_action_member_set_category'] = array(
    'label' => t('Set membership category to {value}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'category' => array('type' => 'string', 'label' => t('New category')),
    ),
    'help' => t('The category of this membership will be changed to the selected value'),
  );
  $actions['membership_action_member_set_standing'] = array(
    'label' => t('Set membership status to {value}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'standing' => array('type' => 'string', 'label' => t('New status')),
    ),
    'help' => t('The status of this membership will be changed to the selected value'),
  );
  $actions['membership_action_member_add_note'] = array(
    'label' => t('Add membership note: {text}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this membership record'),
  );
  $actions['membership_action_member_send_email'] = array(
    'label' => t('Send email to member: {subject}'),
    'module' => t('Membership'),
    'arguments' => array(
      'member' => array('type' => 'member', 'label' => t('Member')),
      'subject' => array('type' => 'string', 'label' => t('Email subject')),
      'message' => array('type' => 'string', 'label' => t('Email message')),
    ),
    'help' => t('An email message will be sent to the member'),
  );

  // Specify actions associated with subscription records
  $actions['membership_action_subscription_set_datefrom'] = array(
    'label' => t('Set subscription start: {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'datefrom' => array('type' => 'date', 'label' => t('New start date')),
    ),
    'help' => t('The subscription start will be set to the specified date'),
  );
  $actions['membership_action_subscription_set_dateto'] = array(
    'label' => t('Set subscription finish: {date}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'dateto' => array('type' => 'date', 'label' => t('New finish date')),
    ),
    'help' => t('The subscription finish will be set to the specified date'),
  );
  $actions['membership_action_subscription_add_note'] = array(
    'label' => t('Add subscription note: {text}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subscription' => array('type' => 'subscription', 'label' => t('Subscription')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this subscription record'),
  );

  // Specify actions associated with subscription payment records
  $actions['membership_action_subpayment_add_note'] = array(
    'label' => t('Add subscription payment note: {text}'),
    'module' => t('Membership'),
    'arguments' => array(
      'subpayment' => array('type' => 'subpayment', 'label' => t('Subscription payment')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this subscription payment record'),
  );

  return $actions;
}

/**
 * Mini forms to collect parameters for above action processing
 */
function membership_action_member_set_category_form($settings, &$form) {
  $param = 'category';
  $name = t('Category');
  $desc = t('Chose new category');
  $opts = membership_get_categories();
  membership_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function membership_action_member_set_standing_form($settings, &$form) {
  $param = 'standing';
  $name = t('Status');
  $desc = t('Chose new status');
  $opts = membership_get_standings();
  membership_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function membership_action_set_parameter_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a value for updating the record
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
  //orgright_debug_dump('=== settings ===',$settings);
  //orgright_debug_dump('=== form ===',$form);
}

function membership_action_member_send_email_form($settings, &$form) {
  // Add empty parameter setting if not present
  $settings += array('subject' => '', 'message' => '');
  // Form elements to specify the subject and message body
  $form['settings']['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#description' => t('Specify the subject for the email'),
    '#default_value' => $settings['subject'],
    '#required' => TRUE,
  );
  $form['settings']['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('Specify the message body of the email'),
    '#default_value' => $settings['message'],
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  //unset($form['input_help']['token_rules_input_evaluator']);
}

/**
 * Rules action callback functions
 * Each must implement the action specified
 */
function membership_action_member_set_category($member, $category) {
  // Update the member node with the new category
  $member->category = $category;
  $member->rules_update = TRUE;
  return array('member' => $member);
}

function membership_action_member_set_standing($member, $standing) {
  // Update the member node with the new standing
  $member->standing = $standing;
  $member->rules_update = TRUE;
  return array('member' => $member);
}

function membership_action_member_add_note($member, $note) {
  // Add the new note to the front of the existing notes
  $member->notes = $note . '; ' . $member->notes;
  $member->rules_update = TRUE;
  return array('member' => $member);
}

function membership_action_member_send_email($member, $subject, $message) {
  // build and send an email to the member
  if ($to = membership_get_preferred_email($member->email)) {
    $to = '"' . addslashes(mime_header_encode($member->member)) . '" <' . $to . '>';
    $lang = NULL;
    $args = array(
      'subject' => $subject,
      'message' => $message,
    );
    $from = '"' . t('Administrator') . '" <admin@' . orgright_get_domain() . '>';
    if ($sitesubdir = orgright_get_sitesubdir()) {
      $from = str_replace('<admin@', '<admin.' . $sitesubdir . '@', $from);
    }
    $msg = drupal_mail('orgright', 'send_to_member', $to, $lang, $args, $from);
    if ($msg['result']) {
      watchdog('orgright', 'Email sent to @to, subject @sbj', array('@to' => $to, '@sbj' => $subject), WATCHDOG_INFO);
    }
    else {
      watchdog('orgright', 'Email failuse, to @to, subject @sbj', array('@to' => $to, '@sbj' => $subject), WATCHDOG_WARNING);
    }
  }
}

function membership_action_subscription_set_datefrom($subscription, $datefrom) {
  // Set the subscription start to the specified date
  $subscription->datefrom = $datefrom;
  $subscription->rules_update = TRUE;
  return array('subscription' => $subscription);
}

function membership_action_subscription_set_dateto($subscription, $dateto) {
  // Set the subscription finish to the specified date
  $subscription->dateto = $dateto;
  $subscription->rules_update = TRUE;
  return array('subscription' => $subscription);
}

function membership_action_subscription_add_note($subscription, $note) {
  // Add the new note to the front of the existing notes
  $subscription->notes = $note . '; ' . $subscription->notes;
  $subscription->rules_update = TRUE;
  return array('subscription' => $subscription);
}

function membership_action_subpayment_add_note($subpayment, $note) {
  // Add the new note to the front of the existing notes
  $subpayment->notes = $note . '; ' . $subpayment->notes;
  $subpayment->rules_update = TRUE;
  return array('subpayment' => $subpayment);
}
