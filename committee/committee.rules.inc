<?php
// $Id$

/**
 * @file
 * Provides orgRight Committee automation rules functionality
 * using the Rules module.  This file will define the events that
 * are generated by the committee module, along with conditions
 * and actions that can be undertaken on committee, role, 
 * appointment and assignment items.
 *
 */

/**
 * Implementation of hook_rules_data_type_info
 *
 * Add four new data types for the four node types
 * - committee
 * - role
 * - appointment
 * - assignment
 */
function committee_rules_data_type_info(){
  $datatypes['committee'] = array(
    'label' => t('Committee'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Committee'
  );
  $datatypes['role'] = array(
    'label' => t('Role'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Committee'
  );
  $datatypes['appointment'] = array(
    'label' => t('Appointment'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Committee'
  );
  $datatypes['assignment'] = array(
    'label' => t('Assignment'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Committee'
  );
  return $datatypes;
}


/**
 * Implementation of hook_rules_event_info
 */
function committee_rules_event_info() {
  // Specify events relating to committee records
  $events['committee_event_committee_create'] = array(
    'label' => t('Committee has been created'),
    'module' => 'Committee',
    'arguments' => array(
      'committee_new' => array('type' => 'committee', 'label' => t('New committee record')),
    ),
    'help' => t(''),
  );
  $events['committee_event_committee_update'] = array(
    'label' => t('Committee has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'committee_new' => array('type' => 'committee', 'label' => t('Updated committee record')),
      'committee_old' => array('type' => 'committee', 'label' => t('Original committee record'),
         'handler' => 'committee_event_committee_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_committee_delete'] = array(
    'label' => t('Committee has been deleted'),
    'module' => 'Committee',
    'arguments' => array(
      'committee_old' => array('type' => 'committee', 'label' => t('Original committee record')),
    ),
    'help' => t(''),
  );
  $events['committee_event_committee_pnid_update'] = array(
    'label' => t('Committee parent has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'committee_new' => array('type' => 'committee', 'label' => t('Updated committee record')),
      'committee_old' => array('type' => 'committee', 'label' => t('Original committee record'),
         'handler' => 'committee_event_committee_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to role records
  $events['committee_event_role_create'] = array(
    'label' => t('Role has been created'),
    'module' => 'Committee',
    'arguments' => array(
      'role_new' => array('type' => 'role', 'label' => t('Updated role record')),
    ),
    'help' => t(''),
  );
  $events['committee_event_role_update'] = array(
    'label' => t('Role has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'role_new' => array('type' => 'role', 'label' => t('Updated role record')),
      'role_old' => array('type' => 'role', 'label' => t('Original role record'),
         'handler' => 'committee_event_role_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_role_delete'] = array(
    'label' => t('Role has been deleted'),
    'module' => 'Committee',
    'arguments' => array(
      'role_old' => array('type' => 'role', 'label' => t('Original role record')),
    ),
    'help' => t(''),
  );
  $events['committee_event_role_cnid_update'] = array(
    'label' => t('Role committee has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'role_new' => array('type' => 'role', 'label' => t('Updated role record')),
      'role_old' => array('type' => 'role', 'label' => t('Original role record'),
         'handler' => 'committee_event_role_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_role_multiperson_update'] = array(
    'label' => t('Role multi-person flag has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'role_new' => array('type' => 'role', 'label' => t('Updated role record')),
      'role_old' => array('type' => 'role', 'label' => t('Original role record'),
         'handler' => 'committee_event_role_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_role_allowvacant_update'] = array(
    'label' => t('Role allow vacant flag has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'role_new' => array('type' => 'role', 'label' => t('Updated role record')),
      'role_old' => array('type' => 'role', 'label' => t('Original role record'),
         'handler' => 'committee_event_role_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to appointment records
  $events['committee_event_appointment_create'] = array(
    'label' => t('Appointment has been created'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_new' => array('type' => 'appointment', 'label' => t('Created appointment record')),
      'member_new' => array('type' => 'member', 'label' => t('Appointed member'),
        'handler' => 'committee_event_appointment_get_member'),
      'committee_new' => array('type' => 'committee', 'label' => t('Associated committee'),
        'handler' => 'committee_event_appointment_get_committee'),
    ),
    'help' => t(''),
  );
  $events['committee_event_appointment_update'] = array(
    'label' => t('Appointment has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_new' => array('type' => 'appointment', 'label' => t('Updated appointment record')),
      'appointment_old' => array('type' => 'appointment', 'label' => t('Original appointment record'),
         'handler' => 'committee_event_appointment_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Appointed member'),
        'handler' => 'committee_event_appointment_get_member'),
      'committee_new' => array('type' => 'committee', 'label' => t('Associated committee'),
        'handler' => 'committee_event_appointment_get_committee'),
    ),
    'help' => t(''),
  );
  $events['committee_event_appointment_delete'] = array(
    'label' => t('Appointment has been deleted'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_old' => array('type' => 'appointment', 'label' => t('Original appointment record')),
      'member_old' => array('type' => 'member', 'label' => t('Appointed member'),
        'handler' => 'committee_event_appointment_get_member'),
      'committee_old' => array('type' => 'committee', 'label' => t('Associated committee'),
        'handler' => 'committee_event_appointment_get_committee'),
    ),
    'help' => t(''),
  );
  $events['committee_event_appointment_mnid_update'] = array(
    'label' => t('Appointment member has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_new' => array('type' => 'appointment', 'label' => t('Updated appointment record')),
      'appointment_old' => array('type' => 'appointment', 'label' => t('Original appointment record'),
         'handler' => 'committee_event_appointment_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Updated member'),
        'handler' => 'committee_event_appointment_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
        'handler' => 'committee_event_appointment_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['committee_event_appointment_cnid_update'] = array(
    'label' => t('Appointment committee has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_new' => array('type' => 'appointment', 'label' => t('Updated appointment record')),
      'appointment_old' => array('type' => 'appointment', 'label' => t('Original appointment record'),
         'handler' => 'committee_event_appointment_update_get_original'),
      'committee_new' => array('type' => 'committee', 'label' => t('Updated committee'),
        'handler' => 'committee_event_appointment_get_committee'),
      'committee_old' => array('type' => 'committee', 'label' => t('Original committee'),
        'handler' => 'committee_event_appointment_update_get_original_committee'),
    ),
    'help' => t(''),
  );
  $events['committee_event_appointment_appointtype_update'] = array(
    'label' => t('Appointment type has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_new' => array('type' => 'appointment', 'label' => t('Updated appointment record')),
      'appointment_old' => array('type' => 'appointment', 'label' => t('Original appointment record'),
         'handler' => 'committee_event_appointment_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_appointment_appointdate_update'] = array(
    'label' => t('Appointment start date has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_new' => array('type' => 'appointment', 'label' => t('Updated appointment record')),
      'appointment_old' => array('type' => 'appointment', 'label' => t('Original appointment record'),
         'handler' => 'committee_event_appointment_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_appointment_retiredate_update'] = array(
    'label' => t('Appointment end date has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'appointment_new' => array('type' => 'appointment', 'label' => t('Updated appointment record')),
      'appointment_old' => array('type' => 'appointment', 'label' => t('Original appointment record'),
         'handler' => 'committee_event_appointment_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to assignment records
  $events['committee_event_assignment_create'] = array(
    'label' => t('Assignment has been created'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_new' => array('type' => 'assignment', 'label' => t('Created assignment record')),
      'member_new' => array('type' => 'member', 'label' => t('Assigned member'),
        'handler' => 'committee_event_assignment_get_member'),
      'role_new' => array('type' => 'role', 'label' => t('Associated role'),
        'handler' => 'committee_event_assignment_get_role'),
    ),
    'help' => t(''),
  );
  $events['committee_event_assignment_update'] = array(
    'label' => t('Assignment has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_new' => array('type' => 'assignment', 'label' => t('Updated assignment record')),
      'assignment_old' => array('type' => 'assignment', 'label' => t('Original assignment record'),
         'handler' => 'committee_event_assignment_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Assigned member'),
        'handler' => 'committee_event_assignment_get_member'),
      'role_new' => array('type' => 'role', 'label' => t('Associated role'),
        'handler' => 'committee_event_assignment_get_role'),
    ),
    'help' => t(''),
  );
  $events['committee_event_assignment_delete'] = array(
    'label' => t('Assignment has been deleted'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_old' => array('type' => 'assignment', 'label' => t('Original assignment record')),
      'member_old' => array('type' => 'member', 'label' => t('Assigned member'),
        'handler' => 'committee_event_assignment_get_member'),
      'role_old' => array('type' => 'role', 'label' => t('Associated role'),
        'handler' => 'committee_event_assignment_get_role'),
    ),
    'help' => t(''),
  );
  $events['committee_event_assignment_mnid_update'] = array(
    'label' => t('Assignment member has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_new' => array('type' => 'assignment', 'label' => t('Updated assignment record')),
      'assignment_old' => array('type' => 'assignment', 'label' => t('Original assignment record'),
         'handler' => 'committee_event_assignment_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Updated member'),
        'handler' => 'committee_event_assignment_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Original member'),
        'handler' => 'committee_event_assignment_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['committee_event_assignment_rnid_update'] = array(
    'label' => t('Assignment role has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_new' => array('type' => 'assignment', 'label' => t('Updated assignment record')),
      'assignment_old' => array('type' => 'assignment', 'label' => t('Original assignment record'),
         'handler' => 'committee_event_assignment_update_get_original'),
      'role_new' => array('type' => 'role', 'label' => t('Updated role'),
        'handler' => 'committee_event_assignment_get_role'),
      'role_old' => array('type' => 'role', 'label' => t('Original role'),
        'handler' => 'committee_event_assignment_update_get_original_role'),
    ),
    'help' => t(''),
  );
  $events['committee_event_assignment_assigntype_update'] = array(
    'label' => t('Assignment type has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_new' => array('type' => 'assignment', 'label' => t('Updated assignment record')),
      'assignment_old' => array('type' => 'assignment', 'label' => t('Original assignment record'),
         'handler' => 'committee_event_assignment_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_assignment_assigndate_update'] = array(
    'label' => t('Assignment start date has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_new' => array('type' => 'assignment', 'label' => t('Updated assignment record')),
      'assignment_old' => array('type' => 'assignment', 'label' => t('Original assignment record'),
         'handler' => 'committee_event_assignment_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['committee_event_assignment_ceasedate_update'] = array(
    'label' => t('Assignment end date has been updated'),
    'module' => 'Committee',
    'arguments' => array(
      'assignment_new' => array('type' => 'assignment', 'label' => t('Updated assignment record')),
      'assignment_old' => array('type' => 'assignment', 'label' => t('Original assignment record'),
         'handler' => 'committee_event_assignment_update_get_original'),
    ),
    'help' => t(''),
  );

  return $events;
}

/**
 * handlers for loading data items when required
 */
function committee_event_committee_update_get_original($node) {
  return committee_event_update_get_original('committee', $node);
}

function committee_event_role_update_get_original($node) {
  return committee_event_update_get_original('role', $node);
}

function committee_event_appointment_update_get_original($node) {
  return committee_event_update_get_original('appointment', $node);
}

function committee_event_assignment_update_get_original($node) {
  return committee_event_update_get_original('assignment', $node);
}

function committee_event_update_get_original($type, $node) {
  // The passed node is the updated version, original no longer on database
  // so create a dummy copy and populate with selected data from current
  // version, and then merge in the saved original data
  $o_node = (object)orgright_create_node($type);
  $o_node->nid = $node->nid;
  $o_node->vid = $node->vid;
  $o_node->uid = $node->uid;
  $o_node->name = $node->name;
  if ($o_data = unserialize($node->original)) {
    foreach ($o_data as $field => $value) { $o_node->$field = $value; }
  }
  return $o_node;
}

function committee_event_appointment_get_member($node) {
  return node_load($node->mnid);
}

function committee_event_appointment_get_committee($node) {
  return node_load($node->cnid);
}

function committee_event_assignment_get_member($node) {
  return node_load($node->mnid);
}

function committee_event_assignment_get_role($node) {
  return node_load($node->rnid);
}

function committee_event_appointment_update_get_original_member($node) {
  $oldnode = committee_event_appointment_update_get_original($node);
  return node_load($oldnode->mnid);
}

function committee_event_appointment_update_get_original_committee($node) {
  $oldnode = committee_event_appointment_update_get_original($node);
  return node_load($oldnode->cnid);
}

function committee_event_assignment_update_get_original_member($node) {
  $oldnode = committee_event_assignment_update_get_original($node);
  return node_load($oldnode->mnid);
}

function committee_event_assignment_update_get_original_role($node) {
  $oldnode = committee_event_assignment_update_get_original($node);
  return node_load($oldnode->rnid);
}


/**
 * Implementation of hook_rules_condition_info
 */
function committee_rules_condition_info() {
  // Specify conditions relating to committee records
  $conditions['committee_condition_committee_is_primary'] = array(
    'label' => t('Committee is primary'),
    'module' => t('Committee'),
    'arguments' => array(
       'committee' => array('type' => 'committee', 'label' => t('Committee')),
     ),
    'help' => t('Is TRUE if the committee has sub-committees'),
  );
  $conditions['committee_condition_committee_is_subsidiary'] = array(
    'label' => t('Committee is subsidiary'),
    'module' => t('Committee'),
    'arguments' => array(
       'committee' => array('type' => 'committee', 'label' => t('Committee')),
     ),
    'help' => t('Is TRUE if the committee is a sub-committee'),
  );
  $conditions['committee_condition_committee_name_is'] = array(
    'label' => t('Committee name is {value}'),
    'module' => t('Committee'),
    'arguments' => array(
       'committee' => array('type' => 'committee', 'label' => t('Committee')),
       'name' => array('type' => 'string', 'label' => t('Name')),
     ),
    'help' => t('Is TRUE if committee matches the selected value'),
  );
  $conditions['committee_condition_committee_pnid_is'] = array(
    'label' => t('committee status is {value}'),
    'module' => t('Committee'),
    'arguments' => array(
       'committee' => array('type' => 'committee', 'label' => t('Committee')),
       'pnid' => array('type' => 'number', 'label' => t('Parent')),
     ),
    'help' => t('Is TRUE if a sub-committee of the selected committee'),
  );

  // Specify conditions relating to role records
  $conditions['committee_condition_role_cnid_is'] = array(
    'label' => t('Role belongs to {committee}'),
    'module' => t('Committee'),
    'arguments' => array(
       'role' => array('type' => 'role', 'label' => t('Role')),
       'cnid' => array('type' => 'number', 'label' => t('Committee')),
     ),
    'help' => t('Is TRUE if the role belongs to specified committee'),
  );
  $conditions['committee_condition_role_is_multiperson'] = array(
    'label' => t('Multiperson = yes'),
    'module' => t('Committee'),
    'arguments' => array(
       'role' => array('type' => 'role', 'label' => t('role')),
     ),
    'help' => t('Is TRUE if multiple simultaneous assignments to role allowed'),
  );
  $conditions['committee_condition_role_is_allowvacant'] = array(
    'label' => t('Allowvacant = yes'),
    'module' => t('Committee'),
    'arguments' => array(
       'role' => array('type' => 'role', 'label' => t('role')),
     ),
    'help' => t('Is TRUE if the role is allowed to be vacant'),
  );

  // Specify conditions relating to appointment records
  $conditions['committee_condition_appointment_cnid_is'] = array(
    'label' => t('Appointment to {committee}'),
    'module' => t('Committee'),
    'arguments' => array(
       'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
       'cnid' => array('type' => 'number', 'label' => t('Committee')),
     ),
    'help' => t('Is TRUE if the appointment is for the specified committee'),
  );
  $conditions['committee_condition_appointment_appointtype_is'] = array(
    'label' => t('Appointment category {type}'),
    'module' => t('Committee'),
    'arguments' => array(
       'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
       'appointtype' => array('type' => 'string', 'label' => t('Category')),
     ),
    'help' => t('Is TRUE if the appointment category matches the specified type'),
  );
  $conditions['committee_condition_appointment_appointdate_before'] = array(
    'label' => t('Appointment starts before {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
       'appointdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the appointment starts before the specified date'),
  );
  $conditions['committee_condition_appointment_appointdate_after'] = array(
    'label' => t('Appointment starts after {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
       'appointdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the appointment starts after the specified date'),
  );
  $conditions['committee_condition_appointment_retiredate_before'] = array(
    'label' => t('Appointment ends before {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
       'retiredate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the appointment ends before the specified date'),
  );
  $conditions['committee_condition_appointment_retiredate_after'] = array(
    'label' => t('Appointment ends after {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
       'retiredate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the appointment ends after the specified date'),
  );

  // Specify conditions relating to assignment records
  $conditions['committee_condition_assignment_rnid_is'] = array(
    'label' => t('Assignment to {role}'),
    'module' => t('Committee'),
    'arguments' => array(
       'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
       'rnid' => array('type' => 'number', 'label' => t('Role')),
     ),
    'help' => t('Is TRUE if the assignment is for the specified role'),
  );
  $conditions['committee_condition_assignment_cnid_is'] = array(
    'label' => t('Assignment to role on {committee}'),
    'module' => t('Committee'),
    'arguments' => array(
       'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
       'cnid' => array('type' => 'number', 'label' => t('Role')),
     ),
    'help' => t('Is TRUE if the assignment is to a role on the specified commitee'),
  );
  $conditions['committee_condition_assignment_assigntype_is'] = array(
    'label' => t('Assignment category {type}'),
    'module' => t('Committee'),
    'arguments' => array(
       'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
       'assigntype' => array('type' => 'string', 'label' => t('Category')),
     ),
    'help' => t('Is TRUE if the assignment category matches the specified type'),
  );
  $conditions['committee_condition_assignment_assigndate_before'] = array(
    'label' => t('Assignment starts before {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
       'assigndate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the assignment starts before the specified date'),
  );
  $conditions['committee_condition_assignment_assigndate_after'] = array(
    'label' => t('Assignment starts after {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
       'assigndate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the assignment starts after the specified date'),
  );
  $conditions['committee_condition_assignment_ceasedate_before'] = array(
    'label' => t('Assignment ends before {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
       'ceasedate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the assignment ends before the specified date'),
  );
  $conditions['committee_condition_assignment_ceasedate_after'] = array(
    'label' => t('Assignment ends after {date}'),
    'module' => t('Committee'),
    'arguments' => array(
       'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
       'ceasedate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the assignment ends after the specified date'),
  );

  return $conditions;
}

/**
 * Mini forms to collect parameters for above condition checking
 */
function committee_condition_committee_name_is_form($settings, &$form) {
  $param = 'name';
  $name = t('Committee');
  $desc = t('Chose committee for compare');
  $opts = committee_get_committees('name');
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_committee_pnid_is_form($settings, &$form) {
  $param = 'pnid';
  $name = t('Parent committee');
  $desc = t('Chose committee for compare');
  $opts = committee_get_committees('nid');
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_role_cnid_is_form($settings, &$form) {
  $param = 'cnid';
  $name = t('Committee');
  $desc = t('Chose owning committee');
  $opts = committee_get_committees('nid');
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_appointment_cnid_is_form($settings, &$form) {
  $param = 'cnid';
  $name = t('Committee');
  $desc = t('Chose committee for appointment');
  $opts = committee_get_committees('nid');
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_appointment_appointtype_is_form($settings, &$form) {
  $param = 'appointtype';
  $name = t('Type');
  $desc = t('Select the appointment type');
  $opts = committee_get_appointtypes();
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_assignment_rnid_is_form($settings, &$form) {
  $param = 'rnid';
  $name = t('Role');
  $desc = t('Select the role');
  $opts = committee_get_roles('nid');
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_assignment_cnid_is_form($settings, &$form) {
  $param = 'cnid';
  $name = t('Committee');
  $desc = t('Chose committee owning role');
  $opts = committee_get_committees('nid');
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_assignment_assigntype_is_form($settings, &$form) {
  $param = 'assigntype';
  $name = t('Type');
  $desc = t('Select the assignment type');
  $opts = committee_get_assigntypes();
  committee_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_condition_parameter_is_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for checking
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
}

/**
 * Rules condition callback functions
 * Each must return either TRUE or FALSE
 */
function committee_condition_committee_is_primary($committee) {
  // TRUE if subsidiary committees exist for this committee
  $sql = "SELECT COUNT(c.nid) FROM {node} n JOIN {org_committees} c ON c.nid = n.nid WHERE c.vid = n.vid AND c.pnid = %d";
  return db_result(db_query($sql, $committee->nid));
}

function committee_condition_committee_is_subsidary($committee) {
  // TRUE if this is committee has a parent
  return $committee->pnid;
}

function committee_condition_committee_name_is($committee, $name) {
  // TRUE if the committee name matches the specified value
  return ($committee->committee == $name);
}

function committee_condition_committee_pnid_is($committee, $pnid) {
  // TRUE if the committee parent matches the specified value
  return ($committee->pnid == $pnid);
}

function committee_condition_role_cnid_is($role, $cnid) {
  // TRUE if role belongs to specified committee
  return ($role->cnid == $cnid);
}

function committee_condition_role_is_multiperson($role) {
  // TRUE if multiple simultanous assignment to role allowed
  return ($role->multiperson);
}

function committee_condition_role_is_allowvacant($role) {
  // TRUE if role is allowed to be vacant
  return ($role->allowvacant);
}


function committee_condition_appointment_cnid_is($appointment, $cnid) {
  // TRUE if appointment is to the specified committee
  return ($appointment->cnid == $cnid);
}

function committee_condition_appointment_appointtype_is($appointment, $appointtype) {
  // TRUE if appointment is of the specified type
  return ($appointment->appointtype == $appointtype);
}

function committee_condition_appointment_appointdate_before($appointment, $tdate) {
  // TRUE if appointment starts before the supplied date
  return ($appointment->appointdate < $tdate);
}

function committee_condition_appointment_appointdate_after($appointment, $tdate) {
  // TRUE if appointment starts after the supplied date
  return ($appointment->appointdate > $tdate);
}

function committee_condition_appointment_retiredate_before($appointment, $tdate) {
  // TRUE if appointment ends before the supplied date
  return ($appointment->retiredate < $tdate);
}

function committee_condition_appointment_retiredate_after($appointment, $tdate) {
  // TRUE if appointment ends after the supplied date
  return ($appointment->retiredate > $tdate);
}


function committee_condition_assignment_rnid_is($assignment, $rnid) {
  // TRUE if assignment is to the specified role
  return ($assignment->rnid == $rnid);
}

function committee_condition_assignment_cnid_is($assignment, $cnid) {
  // TRUE if assignment is to a role on the specified committee
  $sql = "SELECT r.cnid FROM {node} n JOIN {org_roles} r ON r.nid = n.nid WHERE r.vid = n.vid AND r.nid = %d";
  return (db_result(db_query($sql, $assignment->rnid)) == $cnid);
}

function committee_condition_assignment_assigntype_is($assignment, $assigntype) {
  // TRUE if assignment is of the specified type
  return ($assignment->assigntype == $assigntype);
}

function committee_condition_assignment_assigndate_before($assignment, $tdate) {
  // TRUE if assignment starts before the supplied date
  return ($assignment->assigndate < $tdate);
}

function committee_condition_assignment_assigndate_after($assignment, $tdate) {
  // TRUE if assignment starts after the supplied date
  return ($assignment->assigndate > $tdate);
}

function committee_condition_assignment_ceasedate_before($assignment, $tdate) {
  // TRUE if assignment ends before the supplied date
  return ($assignment->ceasedate < $tdate);
}

function committee_condition_assignment_ceasedate_after($assignment, $tdate) {
  // TRUE if assignment ends after the supplied date
  return ($assignment->ceasedate > $tdate);
}


/**
 * Implementation of hook_rules_action_info
 */
function committee_rules_action_info() {
  // Specify actions associated with committee records
  $actions['committee_action_committee_add_note'] = array(
    'label' => t('Add committee note: {text}'),
    'module' => t('Committee'),
    'arguments' => array(
      'committee' => array('type' => 'committee', 'label' => t('committee')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this committee record'),
  );
  $actions['committee_action_committee_add_maillist'] = array(
    'label' => t('Add committee mailing list: {name}'),
    'module' => t('Committee'),
    'arguments' => array(
      'committee' => array('type' => 'committee', 'label' => t('committee')),
    ),
    'help' => t('A mailing list will be created for members of this committee'),
  );

  // Specify actions associated with role records
  $actions['committee_action_role_add_note'] = array(
    'label' => t('Add role note: {text}'),
    'module' => t('Committee'),
    'arguments' => array(
      'role' => array('type' => 'role', 'label' => t('role')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this role record'),
  );

  // Specify actions associated with appointment records
  $actions['committee_action_appointment_set_appointtype'] = array(
    'label' => t('Set appointment type to {value}'),
    'module' => t('Committee'),
    'arguments' => array(
      'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
      'appointtype' => array('type' => 'string', 'label' => t('New type')),
    ),
    'help' => t('The appointment type will be changed to the selected value'),
  );
  $actions['committee_action_appointment_set_appointdate'] = array(
    'label' => t('Set appointment start: {date}'),
    'module' => t('Committee'),
    'arguments' => array(
      'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
      'appointdate' => array('type' => 'date', 'label' => t('New start date')),
    ),
    'help' => t('The appointment start will be set to the specified date'),
  );
  $actions['committee_action_appointment_subscribe_member'] = array(
    'label' => t('Subscribe member to committee mailing list: {committee}'),
    'module' => t('Committee'),
    'arguments' => array(
      'committee' => array('type' => 'committee', 'label' => t('committee')),
    ),
    'help' => t('The member will be subscribed to the committee mailing list'),
  );
  $actions['committee_action_appointment_set_retiredate'] = array(
    'label' => t('Set appointment finish: {date}'),
    'module' => t('Committee'),
    'arguments' => array(
      'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
      'retiredate' => array('type' => 'date', 'label' => t('New finish date')),
    ),
    'help' => t('The appointment finish will be set to the specified date'),
  );
  $actions['committee_action_appointment_unsubscribe_member'] = array(
    'label' => t('Unsubscribe member from committee mailing list: {committee}'),
    'module' => t('Committee'),
    'arguments' => array(
      'committee' => array('type' => 'committee', 'label' => t('committee')),
    ),
    'help' => t('The member will be removed from the committee mailing list'),
  );
  $actions['committee_action_appointment_add_note'] = array(
    'label' => t('Add appointment note: {text}'),
    'module' => t('Committee'),
    'arguments' => array(
      'appointment' => array('type' => 'appointment', 'label' => t('Appointment')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this appointment record'),
  );

  // Specify actions associated with assignment records
  $actions['committee_action_assignment_set_assigntype'] = array(
    'label' => t('Set assignment category to {value}'),
    'module' => t('Committee'),
    'arguments' => array(
      'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
      'assigntype' => array('type' => 'string', 'label' => t('New category')),
    ),
    'help' => t('The assignment category will be changed to the selected value'),
  );
  $actions['committee_action_assignment_set_assigndate'] = array(
    'label' => t('Set assignment start: {date}'),
    'module' => t('Committee'),
    'arguments' => array(
      'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
      'assigndate' => array('type' => 'date', 'label' => t('New start date')),
    ),
    'help' => t('The assignment start will be set to the specified date'),
  );
  $actions['committee_action_assignment_set_ceasedate'] = array(
    'label' => t('Set assignment finish: {date}'),
    'module' => t('Committee'),
    'arguments' => array(
      'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
      'ceasedate' => array('type' => 'date', 'label' => t('New finish date')),
    ),
    'help' => t('The assignment finish will be set to the specified date'),
  );
  $actions['committee_action_assignment_add_note'] = array(
    'label' => t('Add assignment note: {text}'),
    'module' => t('Committee'),
    'arguments' => array(
      'assignment' => array('type' => 'assignment', 'label' => t('Assignment')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this assignment record'),
  );

  return $actions;
}

/**
 * Mini forms to collect parameters for above action processing
 */
function committee_action_appointment_set_appointtype_form($settings, &$form) {
  $param = 'appointtype';
  $name = t('Type');
  $desc = t('Chose new type');
  $opts = committee_get_appointtypes();
  committee_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_action_assignment_set_assigntype_form($settings, &$form) {
  $param = 'assigntype';
  $name = t('Type');
  $desc = t('Chose new type');
  $opts = committee_get_assigntypes();
  committee_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function committee_action_set_parameter_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for updating
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
}

/**
 * Rules action callback functions
 * Each must implement the action specified
 */
function committee_action_committee_add_note($committee, $note) {
  // Add the new note to the front of the existing notes
  $committee->notes = $note . '; ' . $committee->notes;
  $committee->rules_update = TRUE;
  return array('committee' => $committee);
}

function committee_action_committee_add_maillist($committee) {
  // Create the new mailing list using the committee name
  // Convert name to lower case and replace spaces with underscores
  $maillist = preg_replace(' ', '_', strtolower($committee->committee));
  // remove any special characters
  $maillist = preg_replace('/[^a-z0-9_]/', '', $maillist);
  // now generate an action file that will create the list
  if (module_exists('maillist')) {
    maillist_generate_action_file('create', $maillist);
  }
  $committee->rules_update = TRUE;
  return array('committee' => $committee);
}

function committee_action_role_add_note($role, $note) {
  // Add the new note to the front of the existing notes
  $role->notes = $note . '; ' . $role->notes;
  $role->rules_update = TRUE;
  return array('role' => $role);
}

function committee_action_appointment_set_appointtype($appointment, $appointtype) {
  // Set the appointment type to the specified value
  $appointment->appointtype = $appointtype;
  $appointment->rules_update = TRUE;
  return array('appointment' => $appointment);
}

function committee_action_appointment_set_appointdate($appointment, $appointdate) {
  // Set the appointment start to the specified date
  $appointment->appointdate = $appointdate;
  $appointment->rules_update = TRUE;
  return array('appointment' => $appointment);
}

function committee_action_appointment_subscribe_member($committee) {
  // Subscriber the member to the committee mailing list
  return;
}

function committee_action_appointment_set_retiredate($appointment, $retiredate) {
  // Set the appointment finish to the specified date
  $appointment->retiredate = $retiredate;
  $appointment->rules_update = TRUE;
  return array('appointment' => $appointment);
}

function committee_action_appointment_unsubscribe_member($committee) {
  // Unsubscribe the member from the committee mailing list
  return;
}

function committee_action_appointment_add_note($appointment, $note) {
  // Add the new note to the front of the existing notes
  $appointment->notes = $note . '; ' . $appointment->notes;
  $appointment->rules_update = TRUE;
  return array('appointment' => $appointment);
}

function committee_action_assignment_set_assigntype($assignment, $assigntype) {
  // Set the assignment type to the specified value
  $assignment->assigntype = $assigntype;
  $assignment->rules_update = TRUE;
  return array('assignment' => $assignment);
}

function committee_action_assignment_set_assigndate($assignment, $assigndate) {
  // Set the assignment start to the specified date
  $assignment->assigndate = $assigndate;
  $assignment->rules_update = TRUE;
  return array('assignment' => $assignment);
}

function committee_action_assignment_set_creasedate($assignment, $ceasedate) {
  // Set the assignment finish to the specified date
  $assignment->ceasedate = $ceasedate;
  $assignment->rules_update = TRUE;
  return array('assignment' => $assignment);
}

function committee_action_assignment_add_note($assignment, $note) {
  // Add the new note to the front of the existing notes
  $assignment->notes = $note . '; ' . $assignment->notes;
  $assignment->rules_update = TRUE;
  return array('assignment' => $assignment);
}

