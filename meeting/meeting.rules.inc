<?php
// $Id$

/**
 * @file
 * Provides orgRight Meeting automation rules functionality
 * using the Rules module.  This file will define the events that
 * are generated by the meeting module, along with conditions
 * and actions that can be undertaken on meeting, agenda_item, 
 * and payment information items.
 *
 */

/**
 * Implementation of hook_rules_data_type_info
 *
 * Add three new data types for the three node types
 * - meeting
 * - agenda_item
 * - meeting item ("mtg_item")
 */
function meeting_rules_data_type_info(){
  $datatypes['meeting'] = array(
    'label' => t('Meeting'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Meeting'
  );
  $datatypes['agenda_item'] = array(
    'label' => t('Agenda_item'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Meeting'
  );
  $datatypes['mtg_item'] = array(
    'label' => t('Meeting item'),
    'class' => 'rules_data_type_node',
    'identifiable' => TRUE,
    'savable' => TRUE,
    'module' => 'Meeting'
  );
  return $datatypes;
}


/**
 * Implementation of hook_rules_event_info
 */
function meeting_rules_event_info() {
  // Specify events relating to meeting records
  $events['meeting_event_meeting_create'] = array(
    'label' => t('Meeting has been created'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('New meeting record')),
      'committee_new' => array('type' => 'committee', 'label' => t('Associated committee'),
        'handler' => 'meeting_event_meeting_get_committee'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_update'] = array(
    'label' => t('Meeting has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record'),
         'handler' => 'meeting_event_meeting_update_get_original'),
      'committee_new' => array('type' => 'committee', 'label' => t('Associated committee'),
        'handler' => 'meeting_event_meeting_get_committee'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_delete'] = array(
    'label' => t('Meeting has been deleted'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record')),
      'committee_old' => array('type' => 'committee', 'label' => t('Associated committee'),
        'handler' => 'meeting_event_meeting_get_committee'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_committee_update'] = array(
    'label' => t('Meeting committee has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record'),
         'handler' => 'meeting_event_meeting_update_get_original'),
      'committee_new' => array('type' => 'committee', 'label' => t('Original committee'),
        'handler' => 'meeting_event_meeting_get_committee'),
      'committee_old' => array('type' => 'committee', 'label' => t('Updated committee'),
        'handler' => 'meeting_event_meeting_update_get_original_committee'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_mtgtype_update'] = array(
    'label' => t('Meeting type has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record'),
         'handler' => 'meeting_event_meeting_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_mtgdate_update'] = array(
    'label' => t('Meeting date has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record'),
         'handler' => 'meeting_event_meeting_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_start_update'] = array(
    'label' => t('Meeting start time has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record'),
         'handler' => 'meeting_event_meeting_update_get_original'),

    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_finish_update'] = array(
    'label' => t('Meeting finish time has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record'),
         'handler' => 'meeting_event_meeting_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_meeting_location_update'] = array(
    'label' => t('Meeting location has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting record'),
         'handler' => 'meeting_event_meeting_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to agenda_item records
  $events['meeting_event_agenda_item_create'] = array(
    'label' => t('Agenda item has been created'),
    'module' => 'Meeting',
    'arguments' => array(
      'agenda_item_new' => array('type' => 'agenda_item', 'label' => t('Updated agenda_item record')),
      'meeting_new' => array('type' => 'meeting', 'label' => t('Meeting'),
         'handler' => 'meeting_event_agenda_item_get_meeting'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_agenda_item_update'] = array(
    'label' => t('Agenda item has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'agenda_item_new' => array('type' => 'agenda_item', 'label' => t('Updated agenda_item record')),
      'agenda_item_old' => array('type' => 'agenda_item', 'label' => t('Original agenda_item record'),
         'handler' => 'meeting_event_agenda_item_get_original'),
      'meeting_new' => array('type' => 'meeting', 'label' => t('Meeting'),
         'handler' => 'meeting_event_agenda_item_get_meeting'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_agenda_item_delete'] = array(
    'label' => t('Agenda item has been deleted'),
    'module' => 'Meeting',
    'arguments' => array(
      'agenda_item_old' => array('type' => 'agenda_item', 'label' => t('Original agenda_item record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Meeting'),
         'handler' => 'meeting_event_agenda_item_get_meeting'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_agenda_item_gnid_update'] = array(
    'label' => t('Agenda item meeting has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'agenda_item_new' => array('type' => 'agenda_item', 'label' => t('Updated agenda_item record')),
      'agenda_item_old' => array('type' => 'agenda_item', 'label' => t('Original agenda_item record'),
         'handler' => 'meeting_event_agenda_item_update_get_original'),
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting'),
         'handler' => 'meeting_event_agenda_item_get_meeting'),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting'),
         'handler' => 'meeting_event_agenda_item_update_get_original_meeting'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_agenda_item_sequence_update'] = array(
    'label' => t('Agenda item sequence has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'agenda_item_new' => array('type' => 'agenda_item', 'label' => t('Updated agenda_item record')),
      'agenda_item_old' => array('type' => 'agenda_item', 'label' => t('Original agenda_item record'),
         'handler' => 'meeting_event_agenda_item_update_get_original'),
    ),
    'help' => t(''),
  );

  // Specify events relating to meeting item records
  $events['meeting_event_mtg_item_create'] = array(
    'label' => t('Meeting item has been created'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_new' => array('type' => 'mtg_item', 'label' => t('Created meeting item record')),
      'meeting_new' => array('type' => 'meeting', 'label' => t('Meeting'),
         'handler' => 'meeting_event_mtg_item_get_meeting'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'meeting_event_mtg_item_get_member'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_mtg_item_update'] = array(
    'label' => t('Meeting item has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_new' => array('type' => 'mtg_item', 'label' => t('Updated meeting item record')),
      'mtg_item_old' => array('type' => 'mtg_item', 'label' => t('Original meeting item record'),
         'handler' => 'meeting_event_mtg_item_get_original'),
      'meeting_new' => array('type' => 'meeting', 'label' => t('Meeting'),
         'handler' => 'meeting_event_mtg_item_get_meeting'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'meeting_event_mtg_item_get_member'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_mtg_item_delete'] = array(
    'label' => t('Meeting item has been deleted'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_old' => array('type' => 'mtg_item', 'label' => t('Original meeting item record')),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Meeting'),
         'handler' => 'meeting_event_mtg_item_get_meeting'),
      'member_old' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'meeting_event_mtg_item_get_member'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_mtg_item_gnid_update'] = array(
    'label' => t('Meeting item meeting has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_new' => array('type' => 'mtg_item', 'label' => t('Updated meeting item record')),
      'mtg_item_old' => array('type' => 'mtg_item', 'label' => t('Original meeting item record'),
         'handler' => 'meeting_event_mtg_item_update_get_original'),
      'meeting_new' => array('type' => 'meeting', 'label' => t('Updated meeting'),
         'handler' => 'meeting_event_mtg_item_get_meeting'),
      'meeting_old' => array('type' => 'meeting', 'label' => t('Original meeting'),
         'handler' => 'meeting_event_mtg_item_update_get_original_meeting'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_mtg_item_mnid_update'] = array(
    'label' => t('Meeting item member has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_new' => array('type' => 'mtg_item', 'label' => t('Updated meeting item record')),
      'mtg_item_old' => array('type' => 'mtg_item', 'label' => t('Original meeting item record'),
         'handler' => 'meeting_event_mtg_item_update_get_original'),
      'member_new' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'meeting_event_mtg_item_get_member'),
      'member_old' => array('type' => 'member', 'label' => t('Member'),
         'handler' => 'meeting_event_mtg_item_update_get_original_member'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_mtg_item_itemname_update'] = array(
    'label' => t('Meeting item name has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_new' => array('type' => 'mtg_item', 'label' => t('Updated meeting item record')),
      'mtg_item_old' => array('type' => 'mtg_item', 'label' => t('Original meeting item record'),
         'handler' => 'meeting_event_mtg_item_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_mtg_item_itemtype_update'] = array(
    'label' => t('Meeting item type has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_new' => array('type' => 'mtg_item', 'label' => t('Updated meeting item record')),
      'mtg_item_old' => array('type' => 'mtg_item', 'label' => t('Original meeting item record'),
         'handler' => 'meeting_event_mtg_item_update_get_original'),
    ),
    'help' => t(''),
  );
  $events['meeting_event_mtg_item_itemdate_update'] = array(
    'label' => t('Meeting item date has been updated'),
    'module' => 'Meeting',
    'arguments' => array(
      'mtg_item_new' => array('type' => 'mtg_item', 'label' => t('Updated meeting item record')),
      'mtg_item_old' => array('type' => 'mtg_item', 'label' => t('Original meeting item record'),
         'handler' => 'meeting_event_mtg_item_update_get_original'),
    ),
    'help' => t(''),
  );

  return $events;
}

/**
 * handlers for loading data items when required
 */
function meeting_event_meeting_update_get_original($node) {
  return meeting_event_update_get_original('meeting', $node);
}

function meeting_event_agenda_item_update_get_original($node) {
  return meeting_event_update_get_original('agenda_item', $node);
}

function meeting_event_mtg_item_update_get_original($node) {
  return meeting_event_update_get_original('mtg_item', $node);
}

function meeting_event_update_get_original($type, $node) {
  // The passed node is the updated version, original no longer on database
  // so create a dummy copy and populate with selected data from current
  // version, and then merge in the saved original data
  $o_node = (object)orgright_create_node($type);
  $o_node->nid = $node->nid;
  $o_node->vid = $node->vid;
  $o_node->uid = $node->uid;
  $o_node->name = $node->name;
  if ($o_data = unserialize($node->original)) {
    foreach ($o_data as $field => $value) { $o_node->$field = $value; }
  }
  return $o_node;
}

function meeting_event_meeting_get_committee($node) {
  return node_load($node->cnid);
}

function meeting_event_agenda_item_get_meeting($node) {
  return node_load($node->gnid);
}

function meeting_event_mtg_item_get_meeting($node) {
  return node_load($node->gnid);
}

function meeting_event_mtg_item_get_member($node) {
  return node_load($node->mnid);
}

function meeting_event_meeting_update_get_original_committee($node) {
  $oldnode = meeting_event_meeting_update_get_original($node);
  return node_load($oldnode->cnid);
}

function meeting_event_agenda_item_update_get_original_meeting($node) {
  $oldnode = meeting_event_agenda_item_update_get_original($node);
  return node_load($oldnode->gnid);
}

function meeting_event_mtg_item_update_get_original_meeting($node) {
  $oldnode = meeting_event_mtg_item_update_get_original($node);
  return node_load($oldnode->gnid);
}

function meeting_event_mtg_item_update_get_original_member($node) {
  $oldnode = meeting_event_mtg_item_update_get_original($node);
  return node_load($oldnode->mnid);
}


/**
 * Implementation of hook_rules_condition_info
 */
function meeting_rules_condition_info() {
  // Specify conditions relating to meeting records
  $conditions['meeting_condition_meeting_cnid_is'] = array(
    'label' => t('Meeting of {committee}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'meeting' => array('type' => 'meeting', 'label' => t('Meeting')),
       'cnid' => array('type' => 'string', 'label' => t('Committee')),
     ),
    'help' => t('Is TRUE if meeting of the selected committee'),
  );
  $conditions['meeting_condition_meeting_mtgtype_is'] = array(
    'label' => t('Meeting type is {value}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'meeting' => array('type' => 'meeting', 'label' => t('Meeting')),
       'mtgtype' => array('type' => 'string', 'label' => t('Type')),
     ),
    'help' => t('Is TRUE if meeting type matches the selected value'),
  );
  $conditions['meeting_condition_meeting_mtgdate_before'] = array(
    'label' => t('Meeting is before {date}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'meeting' => array('type' => 'meeting', 'label' => t('Meeting')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the meeting is before the specified date'),
  );
  $conditions['meeting_condition_meeting_mtgdate_after'] = array(
    'label' => t('Meeting is after {date}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'meeting' => array('type' => 'meeting', 'label' => t('Meeting')),
       'tdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the meeting is after the specified date'),
  );
  $conditions['meeting_condition_meeting_start_before'] = array(
    'label' => t('Meeting starts before {time}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'meeting' => array('type' => 'meeting', 'label' => t('meeting')),
       'ttime' => array('type' => 'date', 'label' => t('Time')),
     ),
    'help' => t('Is TRUE if the meeting is subsidiary to another meeting'),
  );
  $conditions['meeting_condition_meeting_finish_after'] = array(
    'label' => t('Meeting finishes after {time}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'meeting' => array('type' => 'meeting', 'label' => t('meeting')),
       'ttime' => array('type' => 'date', 'label' => t('Time')),
     ),
    'help' => t('Is TRUE if the date joined is earlier than the specified date'),
  );

  // Specify conditions relating to agenda_item records
  $conditions['meeting_condition_agenda_item_gnid_is'] = array(
    'label' => t('Agenda item for {meeting}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'agenda_item' => array('type' => 'agenda_item', 'label' => t('Agenda item')),
       'gnid' => array('type' => 'number', 'label' => t('Meeting')),
     ),
    'help' => t('Is TRUE if the agenda_item starts before the specified date'),
  );

  // Specify conditions relating to meeting item records
  $conditions['meeting_condition_mtg_item_gnid_is'] = array(
    'label' => t('Meeting item from {meeting}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'mtg_item' => array('type' => 'mtg_item', 'label' => t('Meeting item')),
       'gnid' => array('type' => 'number', 'label' => t('Meeting')),
     ),
    'help' => t('Is TRUE if the meeting item is made before the specified date'),
  );
  $conditions['meeting_condition_mtg_item_itemtype_is'] = array(
    'label' => t('Meeting item of {type}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'mtg_item' => array('type' => 'mtg_item', 'label' => t('Meeting item')),
       'itemtype' => array('type' => 'string', 'label' => t('Type')),
     ),
    'help' => t('Is TRUE if the meeting item is the specified type'),
  );
  $conditions['meeting_condition_mtg_item_itemdate_before'] = array(
    'label' => t('Meeting item before {date}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'mtg_item' => array('type' => 'mtg_item', 'label' => t('Meeting item')),
       'itemdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the meeting item is before the specified date'),
  );
  $conditions['meeting_condition_mtg_item_itemdate_after'] = array(
    'label' => t('Meeting item after {date}'),
    'module' => t('Meeting'),
    'arguments' => array(
       'mtg_item' => array('type' => 'mtg_item', 'label' => t('Meeting item')),
       'itemdate' => array('type' => 'date', 'label' => t('Date')),
     ),
    'help' => t('Is TRUE if the meeting item is after the specified date'),
  );

  return $conditions;
}

/**
 * Mini forms to collect parameters for above condition checking
 */
function meeting_condition_meeting_cnid_is_form($settings, &$form) {
  $param = 'cnid';
  $name = t('Committee');
  $desc = t('Chose committee for compare');
  $opts = committee_get_committees('nid');
  meeting_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function meeting_condition_meeting_mtgtype_is_form($settings, &$form) {
  $param = 'mtgtype';
  $name = t('Type');
  $desc = t('Chose meeting type for compare');
  $opts = meeting_get_meeting_types();
  meeting_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

/*function meeting_condition_agenda_item_gnid_is_form($settings, &$form) {
  $param = 'gnid';
  $name = t('Meeting');
  $desc = t('Chose meeting for compare');
  $opts = meeting_get_meetings('nid');
  meeting_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}*/

/*function meeting_condition_mtg_item_gnid_is_form($settings, &$form) {
  $param = 'gnid';
  $name = t('Meeting');
  $desc = t('Chose meeting for compare');
  $opts = meeting_get_meetings('nid');
  meeting_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}*/

function meeting_condition_mtg_item_itemtype_is_form($settings, &$form) {
  $param = 'itemtype';
  $name = t('Type');
  $desc = t('Chose item type for compare');
  $opts = meeting_get_mtg_item_types();
  meeting_condition_parameter_is_form($settings, $form, $param, $name, $desc, $opts);
}

function meeting_condition_parameter_is_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for checking
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
}


/**
 * Rules condition callback functions
 * Each must return either TRUE or FALSE
 */
function meeting_condition_meeting_cnid_is($meeting, $cnid) {
  // TRUE if the meeting committee matches the specified value
  return ($meeting->cnid == $cnid);
}

function meeting_condition_meeting_mtgtype_is($meeting, $mtgtype) {
  // TRUE if the meeting type matches the specified value
  return ($meeting->mtgtype == $mtgtype);
}

function meeting_condition_meeting_mtgdate_before($meeting, $tdate) {
  // TRUE if meeting date is before the specified date
  return ($meeting->mtgdate < $tdate);
}

function meeting_condition_meeting_mtgdate_after($meeting, $tdate) {
  // TRUE if meeting date is after the specified date
  return ($meeting->mtgdate > $tdate);
}

function meeting_condition_meeting_start_before($meeting, $ttime) {
  // TRUE if meeting starts before the specified time
  return ($meeting->start < $ttime);
}

function meeting_condition_meeting_finish_after($meeting, $ttime) {
  // TRUE if meeting finishes after the specified time
  return ($meeting->finish > $ttime);
}


function meeting_condition_agenda_item_gnid_is($agenda_item, $gnid) {
  // TRUE if agenda_item is for the specified meeting
  return ($agenda_item->gnid == $gnid);
}


function meeting_condition_mtg_item_gnid_is($agenda_item, $gnid) {
  // TRUE if agenda_item is for the specified meeting
  return ($agenda_item->gnid == $gnid);
}

function meeting_condition_mtg_item_itemtype_is($mtg_item, $itemtype) {
  // TRUE if meeting item type matches the supplied value
  return ($mtg_item->itemtype == $itemtype);
}

function meeting_condition_mtg_item_itemdate_before($mtg_item, $itemdate) {
  // TRUE if meeting item completion before the supplied date
  return ($mtg_item->itemdate < $itemdate);
}

function meeting_condition_mtg_item_itemdate_after($mtg_item, $itemdate) {
  // TRUE if meeting item completion after the supplied date
  return ($mtg_item->itemdate > $itemdate);
}


/**
 * Implementation of hook_rules_action_info
 */
function meeting_rules_action_info() {
  // Specify actions associated with meeting records
  $actions['meeting_action_meeting_set_mtgtype'] = array(
    'label' => t('Set meeting type to {value}'),
    'module' => t('Meeting'),
    'arguments' => array(
      'meeting' => array('type' => 'meeting', 'label' => t('Meeting')),
      'mtgtype' => array('type' => 'string', 'label' => t('New type')),
    ),
    'help' => t('The type of this meeting will be changed to the selected value'),
  );
  $actions['meeting_action_meeting_add_note'] = array(
    'label' => t('Add meeting note: {text}'),
    'module' => t('Meeting'),
    'arguments' => array(
      'meeting' => array('type' => 'meeting', 'label' => t('Meeting')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this meeting record'),
  );

  // Specify actions associated with agenda_item records
  $actions['meeting_action_agenda_item_add_note'] = array(
    'label' => t('Add agenda item note: {text}'),
    'module' => t('Meeting'),
    'arguments' => array(
      'agenda_item' => array('type' => 'agenda_item', 'label' => t('Agenda item')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this agenda_item record'),
  );

  // Specify actions associated with meeting item records
  $actions['meeting_action_mtg_item_set_itemtype'] = array(
    'label' => t('Set item type to {type}'),
    'module' => t('Meeting'),
    'arguments' => array(
      'mtg_item' => array('type' => 'mtg_item', 'label' => t('Meeting item')),
      'itemtype' => array('type' => 'string', 'label' => t('New type')),
    ),
    'help' => t('The type of this meeting item will be changed to the selected value'),
  );
  $actions['meeting_action_mtg_item_set_itemdate'] = array(
    'label' => t('Set item date to {date}'),
    'module' => t('Meeting'),
    'arguments' => array(
      'mtg_item' => array('type' => 'mtg_item', 'label' => t('Meeting item')),
      'itemdate' => array('type' => 'date', 'label' => t('New date')),
    ),
    'help' => t('The date of this meeting item will be changed to the selected value'),
  );
  $actions['meeting_action_mtg_item_add_note'] = array(
    'label' => t('Add meeting item note: {text}'),
    'module' => t('Meeting'),
    'arguments' => array(
      'mtg_item' => array('type' => 'mtg_item', 'label' => t('Meeting item')),
      'note' => array('type' => 'string', 'label' => t('Note text')),
    ),
    'help' => t('A note will be added to this meeting item record'),
  );

  return $actions;
}

/**
 * Mini forms to collect parameters for above action processing
 */
function meeting_action_meeting_set_mtgtype_form($settings, &$form) {
  $param = 'mtgtype';
  $name = t('Type');
  $desc = t('Chose new type');
  $opts = meeting_get_meeting_types();
  meeting_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function meeting_action_mtg_item_set_itemtype_form($settings, &$form) {
  $param = 'itemtype';
  $name = t('Type');
  $desc = t('Chose new type');
  $opts = meeting_get_mtg_item_types();
  meeting_action_set_parameter_form($settings, $form, $param, $name, $desc, $opts);
}

function meeting_action_set_parameter_form($settings, &$form, $param, $name, $desc, $opts) {
  // Add empty parameter setting if not present
  $settings += array($param => '');
  // Form elements to select a category for updating
  $form['settings'][$param] = array(
    '#type' => 'select',
    '#title' => $name,
    '#description' => $desc,
    '#default_value' => $settings[$param],
    '#options' => $opts,
    '#required' => TRUE,
  );
  $form['settings']['#type'] = 'fieldset';
  $form['settings']['#title'] = 'Argument value selection';
  $form['settings']['#weight'] = -1;
  unset($form['input_help']['token_rules_input_evaluator']);
}

/**
 * Rules action callback functions
 * Each must implement the action specified
 */
function meeting_action_meeting_set_mtgtype($meeting, $mtgtype) {
  // Update the meeting node with the new mtgtype
  $meeting->mtgtype = $mtgtype;
  $meeting->rules_update = TRUE;
  return array('meeting' => $meeting);
}

function meeting_action_meeting_add_note($meeting, $note) {
  // Add the new note to the front of the existing notes
  $meeting->notes = $note . '; ' . $meeting->notes;
  $meeting->rules_update = TRUE;
  return array('meeting' => $meeting);
}

function meeting_action_agenda_item_add_note($agenda_item, $note) {
  // Add the new note to the front of the existing notes
  $agenda_item->notes = $note . '; ' . $agenda_item->notes;
  $agenda_item->rules_update = TRUE;
  return array('agenda_item' => $agenda_item);
}

function meeting_action_mtg_item_set_itemtype($mtg_item, $itemtype) {
  // Set the agenda item type to the specified value
  $mtg_item->itemtype = $itemtype;
  $mtg_item->rules_update = TRUE;
  return array('mtg_item' => $mtg_item);
}

function meeting_action_agenda_item_set_itemdate($agenda_item, $itemdate) {
  // Set the agenda_item completion to the specified date
  $mtg_item->itemdate = $itemdate;
  $mtg_item->rules_update = TRUE;
  return array('mtg_item' => $mtg_item);
}

function meeting_action_mtg_item_add_note($mtg_item, $note) {
  // Add the new note to the front of the existing notes
  $mtg_item->notes = $note . '; ' . $mtg_item->notes;
  $mtg_item->rules_update = TRUE;
  return array('mtg_item' => $mtg_item);
}

